
AVR-Mavlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  000020fc  00002190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000523  00800240  00800240  000022d0  2**0
                  ALLOC
  3 .stab         00010830  00000000  00000000  000022d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000144f3  00000000  00000000  00012b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00026ff3  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	64 c0       	rjmp	.+200    	; 0xca <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__vector_1>
       8:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_2>
       c:	86 c0       	rjmp	.+268    	; 0x11a <__bad_interrupt>
       e:	00 00       	nop
      10:	84 c0       	rjmp	.+264    	; 0x11a <__bad_interrupt>
      12:	00 00       	nop
      14:	82 c0       	rjmp	.+260    	; 0x11a <__bad_interrupt>
      16:	00 00       	nop
      18:	80 c0       	rjmp	.+256    	; 0x11a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b8 c7       	rjmp	.+3952   	; 0xf8e <__vector_7>
      1e:	00 00       	nop
      20:	7c c0       	rjmp	.+248    	; 0x11a <__bad_interrupt>
      22:	00 00       	nop
      24:	7a c0       	rjmp	.+244    	; 0x11a <__bad_interrupt>
      26:	00 00       	nop
      28:	78 c0       	rjmp	.+240    	; 0x11a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	76 c0       	rjmp	.+236    	; 0x11a <__bad_interrupt>
      2e:	00 00       	nop
      30:	74 c0       	rjmp	.+232    	; 0x11a <__bad_interrupt>
      32:	00 00       	nop
      34:	72 c0       	rjmp	.+228    	; 0x11a <__bad_interrupt>
      36:	00 00       	nop
      38:	70 c0       	rjmp	.+224    	; 0x11a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6e c0       	rjmp	.+220    	; 0x11a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_16>
      44:	6a c0       	rjmp	.+212    	; 0x11a <__bad_interrupt>
      46:	00 00       	nop
      48:	38 c4       	rjmp	.+2160   	; 0x8ba <__vector_18>
      4a:	00 00       	nop
      4c:	63 c4       	rjmp	.+2246   	; 0x914 <__vector_19>
      4e:	00 00       	nop
      50:	64 c0       	rjmp	.+200    	; 0x11a <__bad_interrupt>
      52:	00 00       	nop
      54:	62 c0       	rjmp	.+196    	; 0x11a <__bad_interrupt>
      56:	00 00       	nop
      58:	60 c0       	rjmp	.+192    	; 0x11a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5e c0       	rjmp	.+188    	; 0x11a <__bad_interrupt>
      5e:	00 00       	nop
      60:	5c c0       	rjmp	.+184    	; 0x11a <__bad_interrupt>
      62:	00 00       	nop
      64:	5a c0       	rjmp	.+180    	; 0x11a <__bad_interrupt>
      66:	00 00       	nop
      68:	1d 0d       	add	r17, r13
      6a:	1d 0d       	add	r17, r13
      6c:	32 0d       	add	r19, r2
      6e:	78 0d       	add	r23, r8
      70:	69 0d       	add	r22, r9
      72:	87 0d       	add	r24, r7
      74:	96 0d       	add	r25, r6
      76:	b1 0d       	add	r27, r1
      78:	db 0d       	add	r29, r11
      7a:	11 0e       	add	r1, r17
      7c:	11 0e       	add	r1, r17

0000007e <_ZL21tone_pin_to_timer_PGM>:
      7e:	02                                                  .

0000007f <port_to_output_PGM>:
      7f:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000089 <digital_pin_to_port_PGM>:
      89:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      99:	03 03 03 03                                         ....

0000009d <digital_pin_to_bit_mask_PGM>:
      9d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      ad:	04 08 10 20                                         ... 

000000b1 <digital_pin_to_timer_PGM>:
      b1:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      c1:	00 00 00 00 00                                      .....

000000c6 <__ctors_start>:
      c6:	03 05       	cpc	r16, r3
      c8:	d4 05       	cpc	r29, r4

000000ca <__ctors_end>:
      ca:	11 24       	eor	r1, r1
      cc:	1f be       	out	0x3f, r1	; 63
      ce:	cf ef       	ldi	r28, 0xFF	; 255
      d0:	d8 e0       	ldi	r29, 0x08	; 8
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
      d6:	12 e0       	ldi	r17, 0x02	; 2
      d8:	a0 e0       	ldi	r26, 0x00	; 0
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	ec ef       	ldi	r30, 0xFC	; 252
      de:	f0 e2       	ldi	r31, 0x20	; 32
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
      e2:	05 90       	lpm	r0, Z+
      e4:	0d 92       	st	X+, r0
      e6:	a0 34       	cpi	r26, 0x40	; 64
      e8:	b1 07       	cpc	r27, r17
      ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
      ec:	17 e0       	ldi	r17, 0x07	; 7
      ee:	a0 e4       	ldi	r26, 0x40	; 64
      f0:	b2 e0       	ldi	r27, 0x02	; 2
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
      f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
      f6:	a3 36       	cpi	r26, 0x63	; 99
      f8:	b1 07       	cpc	r27, r17
      fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>

000000fc <__do_global_ctors>:
      fc:	10 e0       	ldi	r17, 0x00	; 0
      fe:	ca ec       	ldi	r28, 0xCA	; 202
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	04 c0       	rjmp	.+8      	; 0x10c <__do_global_ctors+0x10>
     104:	22 97       	sbiw	r28, 0x02	; 2
     106:	fe 01       	movw	r30, r28
     108:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__tablejump__>
     10c:	c6 3c       	cpi	r28, 0xC6	; 198
     10e:	d1 07       	cpc	r29, r17
     110:	c9 f7       	brne	.-14     	; 0x104 <__do_global_ctors+0x8>
     112:	0e 94 b0 08 	call	0x1160	; 0x1160 <main>
     116:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <_exit>

0000011a <__bad_interrupt>:
     11a:	72 cf       	rjmp	.-284    	; 0x0 <__vectors>

0000011c <_Z14serialEventRunv>:
  void serialEvent3() __attribute__((weak));
  bool Serial3_available() __attribute__((weak));
#endif

void serialEventRun(void)
{
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     124:	87 eb       	ldi	r24, 0xB7	; 183
     126:	94 e0       	ldi	r25, 0x04	; 4
     128:	00 97       	sbiw	r24, 0x00	; 0
     12a:	49 f0       	breq	.+18     	; 0x13e <_Z14serialEventRunv+0x22>
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	00 97       	sbiw	r24, 0x00	; 0
     132:	29 f0       	breq	.+10     	; 0x13e <_Z14serialEventRunv+0x22>
     134:	1c d4       	rcall	.+2104   	; 0x96e <_Z17Serial0_availablev>
     136:	88 23       	and	r24, r24
     138:	11 f0       	breq	.+4      	; 0x13e <_Z14serialEventRunv+0x22>
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <_Z14serialEventRunv+0x24>
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	88 23       	and	r24, r24
     142:	11 f0       	breq	.+4      	; 0x148 <_Z14serialEventRunv+0x2c>
     144:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     148:	df 91       	pop	r29
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	00 d0       	rcall	.+0      	; 0x154 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x6>
     154:	1f 92       	push	r1
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	9b 83       	std	Y+3, r25	; 0x03
     15c:	8a 83       	std	Y+2, r24	; 0x02
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     15e:	8a 81       	ldd	r24, Y+2	; 0x02
     160:	9b 81       	ldd	r25, Y+3	; 0x03
     162:	fc 01       	movw	r30, r24
     164:	84 8d       	ldd	r24, Z+28	; 0x1c
     166:	88 2f       	mov	r24, r24
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	2a 81       	ldd	r18, Y+2	; 0x02
     16c:	3b 81       	ldd	r19, Y+3	; 0x03
     16e:	82 0f       	add	r24, r18
     170:	93 1f       	adc	r25, r19
     172:	83 5a       	subi	r24, 0xA3	; 163
     174:	9f 4f       	sbci	r25, 0xFF	; 255
     176:	fc 01       	movw	r30, r24
     178:	80 81       	ld	r24, Z
     17a:	89 83       	std	Y+1, r24	; 0x01
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	9b 81       	ldd	r25, Y+3	; 0x03
     180:	fc 01       	movw	r30, r24
     182:	84 8d       	ldd	r24, Z+28	; 0x1c
     184:	88 2f       	mov	r24, r24
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	8f 73       	andi	r24, 0x3F	; 63
     18c:	90 78       	andi	r25, 0x80	; 128
     18e:	99 23       	and	r25, r25
     190:	24 f4       	brge	.+8      	; 0x19a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x4c>
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	80 6c       	ori	r24, 0xC0	; 192
     196:	9f 6f       	ori	r25, 0xFF	; 255
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	28 2f       	mov	r18, r24
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	9b 81       	ldd	r25, Y+3	; 0x03
     1a0:	fc 01       	movw	r30, r24
     1a2:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     1a4:	8a 81       	ldd	r24, Y+2	; 0x02
     1a6:	9b 81       	ldd	r25, Y+3	; 0x03
     1a8:	fc 01       	movw	r30, r24
     1aa:	86 89       	ldd	r24, Z+22	; 0x16
     1ac:	97 89       	ldd	r25, Z+23	; 0x17
     1ae:	29 81       	ldd	r18, Y+1	; 0x01
     1b0:	fc 01       	movw	r30, r24
     1b2:	20 83       	st	Z, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	9b 81       	ldd	r25, Y+3	; 0x03
     1b8:	fc 01       	movw	r30, r24
     1ba:	80 89       	ldd	r24, Z+16	; 0x10
     1bc:	91 89       	ldd	r25, Z+17	; 0x11
     1be:	2a 81       	ldd	r18, Y+2	; 0x02
     1c0:	3b 81       	ldd	r19, Y+3	; 0x03
     1c2:	f9 01       	movw	r30, r18
     1c4:	20 89       	ldd	r18, Z+16	; 0x10
     1c6:	31 89       	ldd	r19, Z+17	; 0x11
     1c8:	f9 01       	movw	r30, r18
     1ca:	20 81       	ld	r18, Z
     1cc:	20 64       	ori	r18, 0x40	; 64
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18

  if (_tx_buffer_head == _tx_buffer_tail) {
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	9b 81       	ldd	r25, Y+3	; 0x03
     1d6:	fc 01       	movw	r30, r24
     1d8:	23 8d       	ldd	r18, Z+27	; 0x1b
     1da:	8a 81       	ldd	r24, Y+2	; 0x02
     1dc:	9b 81       	ldd	r25, Y+3	; 0x03
     1de:	fc 01       	movw	r30, r24
     1e0:	94 8d       	ldd	r25, Z+28	; 0x1c
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	29 17       	cp	r18, r25
     1e6:	09 f0       	breq	.+2      	; 0x1ea <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x9c>
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	88 23       	and	r24, r24
     1ec:	79 f0       	breq	.+30     	; 0x20c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0xbe>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     1ee:	8a 81       	ldd	r24, Y+2	; 0x02
     1f0:	9b 81       	ldd	r25, Y+3	; 0x03
     1f2:	fc 01       	movw	r30, r24
     1f4:	82 89       	ldd	r24, Z+18	; 0x12
     1f6:	93 89       	ldd	r25, Z+19	; 0x13
     1f8:	2a 81       	ldd	r18, Y+2	; 0x02
     1fa:	3b 81       	ldd	r19, Y+3	; 0x03
     1fc:	f9 01       	movw	r30, r18
     1fe:	22 89       	ldd	r18, Z+18	; 0x12
     200:	33 89       	ldd	r19, Z+19	; 0x13
     202:	f9 01       	movw	r30, r18
     204:	20 81       	ld	r18, Z
     206:	2f 7d       	andi	r18, 0xDF	; 223
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18
  }
}
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	0f 90       	pop	r0
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <_ZN14HardwareSerial5beginEmh>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	61 97       	sbiw	r28, 0x11	; 17
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	f8 94       	cli
     226:	de bf       	out	0x3e, r29	; 62
     228:	0f be       	out	0x3f, r0	; 63
     22a:	cd bf       	out	0x3d, r28	; 61
     22c:	9c 83       	std	Y+4, r25	; 0x04
     22e:	8b 83       	std	Y+3, r24	; 0x03
     230:	4d 83       	std	Y+5, r20	; 0x05
     232:	5e 83       	std	Y+6, r21	; 0x06
     234:	6f 83       	std	Y+7, r22	; 0x07
     236:	78 87       	std	Y+8, r23	; 0x08
     238:	29 87       	std	Y+9, r18	; 0x09
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     23a:	80 e9       	ldi	r24, 0x90	; 144
     23c:	90 ed       	ldi	r25, 0xD0	; 208
     23e:	a3 e0       	ldi	r26, 0x03	; 3
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	2d 81       	ldd	r18, Y+5	; 0x05
     244:	3e 81       	ldd	r19, Y+6	; 0x06
     246:	4f 81       	ldd	r20, Y+7	; 0x07
     248:	58 85       	ldd	r21, Y+8	; 0x08
     24a:	bc 01       	movw	r22, r24
     24c:	cd 01       	movw	r24, r26
     24e:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodsi4>
     252:	da 01       	movw	r26, r20
     254:	c9 01       	movw	r24, r18
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	a1 09       	sbc	r26, r1
     25a:	b1 09       	sbc	r27, r1
     25c:	b6 95       	lsr	r27
     25e:	a7 95       	ror	r26
     260:	97 95       	ror	r25
     262:	87 95       	ror	r24
     264:	9a 83       	std	Y+2, r25	; 0x02
     266:	89 83       	std	Y+1, r24	; 0x01
  *_ucsra = 1 << U2X0;
     268:	8b 81       	ldd	r24, Y+3	; 0x03
     26a:	9c 81       	ldd	r25, Y+4	; 0x04
     26c:	fc 01       	movw	r30, r24
     26e:	80 89       	ldd	r24, Z+16	; 0x10
     270:	91 89       	ldd	r25, Z+17	; 0x11
     272:	22 e0       	ldi	r18, 0x02	; 2
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	9a 81       	ldd	r25, Y+2	; 0x02
     27c:	81 15       	cp	r24, r1
     27e:	f0 e1       	ldi	r31, 0x10	; 16
     280:	9f 07       	cpc	r25, r31
     282:	f0 f0       	brcs	.+60     	; 0x2c0 <_ZN14HardwareSerial5beginEmh+0xa8>
  {
    *_ucsra = 0;
     284:	8b 81       	ldd	r24, Y+3	; 0x03
     286:	9c 81       	ldd	r25, Y+4	; 0x04
     288:	fc 01       	movw	r30, r24
     28a:	80 89       	ldd	r24, Z+16	; 0x10
     28c:	91 89       	ldd	r25, Z+17	; 0x11
     28e:	fc 01       	movw	r30, r24
     290:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     292:	88 e4       	ldi	r24, 0x48	; 72
     294:	98 ee       	ldi	r25, 0xE8	; 232
     296:	a1 e0       	ldi	r26, 0x01	; 1
     298:	b0 e0       	ldi	r27, 0x00	; 0
     29a:	2d 81       	ldd	r18, Y+5	; 0x05
     29c:	3e 81       	ldd	r19, Y+6	; 0x06
     29e:	4f 81       	ldd	r20, Y+7	; 0x07
     2a0:	58 85       	ldd	r21, Y+8	; 0x08
     2a2:	bc 01       	movw	r22, r24
     2a4:	cd 01       	movw	r24, r26
     2a6:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodsi4>
     2aa:	da 01       	movw	r26, r20
     2ac:	c9 01       	movw	r24, r18
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	a1 09       	sbc	r26, r1
     2b2:	b1 09       	sbc	r27, r1
     2b4:	b6 95       	lsr	r27
     2b6:	a7 95       	ror	r26
     2b8:	97 95       	ror	r25
     2ba:	87 95       	ror	r24
     2bc:	9a 83       	std	Y+2, r25	; 0x02
     2be:	89 83       	std	Y+1, r24	; 0x01
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     2c0:	8b 81       	ldd	r24, Y+3	; 0x03
     2c2:	9c 81       	ldd	r25, Y+4	; 0x04
     2c4:	fc 01       	movw	r30, r24
     2c6:	84 85       	ldd	r24, Z+12	; 0x0c
     2c8:	95 85       	ldd	r25, Z+13	; 0x0d
     2ca:	29 81       	ldd	r18, Y+1	; 0x01
     2cc:	3a 81       	ldd	r19, Y+2	; 0x02
     2ce:	23 2f       	mov	r18, r19
     2d0:	33 27       	eor	r19, r19
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18
  *_ubrrl = baud_setting;
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	9c 81       	ldd	r25, Y+4	; 0x04
     2da:	fc 01       	movw	r30, r24
     2dc:	86 85       	ldd	r24, Z+14	; 0x0e
     2de:	97 85       	ldd	r25, Z+15	; 0x0f
     2e0:	29 81       	ldd	r18, Y+1	; 0x01
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 83       	st	Z, r18

  _written = false;
     2e6:	8b 81       	ldd	r24, Y+3	; 0x03
     2e8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ea:	fc 01       	movw	r30, r24
     2ec:	10 8e       	std	Z+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     2ee:	8b 81       	ldd	r24, Y+3	; 0x03
     2f0:	9c 81       	ldd	r25, Y+4	; 0x04
     2f2:	fc 01       	movw	r30, r24
     2f4:	84 89       	ldd	r24, Z+20	; 0x14
     2f6:	95 89       	ldd	r25, Z+21	; 0x15
     2f8:	29 85       	ldd	r18, Y+9	; 0x09
     2fa:	fc 01       	movw	r30, r24
     2fc:	20 83       	st	Z, r18
  
  sbi(*_ucsrb, RXEN0);
     2fe:	8b 81       	ldd	r24, Y+3	; 0x03
     300:	9c 81       	ldd	r25, Y+4	; 0x04
     302:	fc 01       	movw	r30, r24
     304:	82 89       	ldd	r24, Z+18	; 0x12
     306:	93 89       	ldd	r25, Z+19	; 0x13
     308:	2b 81       	ldd	r18, Y+3	; 0x03
     30a:	3c 81       	ldd	r19, Y+4	; 0x04
     30c:	f9 01       	movw	r30, r18
     30e:	22 89       	ldd	r18, Z+18	; 0x12
     310:	33 89       	ldd	r19, Z+19	; 0x13
     312:	f9 01       	movw	r30, r18
     314:	20 81       	ld	r18, Z
     316:	20 61       	ori	r18, 0x10	; 16
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
  sbi(*_ucsrb, TXEN0);
     31c:	8b 81       	ldd	r24, Y+3	; 0x03
     31e:	9c 81       	ldd	r25, Y+4	; 0x04
     320:	fc 01       	movw	r30, r24
     322:	82 89       	ldd	r24, Z+18	; 0x12
     324:	93 89       	ldd	r25, Z+19	; 0x13
     326:	2b 81       	ldd	r18, Y+3	; 0x03
     328:	3c 81       	ldd	r19, Y+4	; 0x04
     32a:	f9 01       	movw	r30, r18
     32c:	22 89       	ldd	r18, Z+18	; 0x12
     32e:	33 89       	ldd	r19, Z+19	; 0x13
     330:	f9 01       	movw	r30, r18
     332:	20 81       	ld	r18, Z
     334:	28 60       	ori	r18, 0x08	; 8
     336:	fc 01       	movw	r30, r24
     338:	20 83       	st	Z, r18
  sbi(*_ucsrb, RXCIE0);
     33a:	8b 81       	ldd	r24, Y+3	; 0x03
     33c:	9c 81       	ldd	r25, Y+4	; 0x04
     33e:	fc 01       	movw	r30, r24
     340:	82 89       	ldd	r24, Z+18	; 0x12
     342:	93 89       	ldd	r25, Z+19	; 0x13
     344:	2b 81       	ldd	r18, Y+3	; 0x03
     346:	3c 81       	ldd	r19, Y+4	; 0x04
     348:	f9 01       	movw	r30, r18
     34a:	22 89       	ldd	r18, Z+18	; 0x12
     34c:	33 89       	ldd	r19, Z+19	; 0x13
     34e:	f9 01       	movw	r30, r18
     350:	20 81       	ld	r18, Z
     352:	20 68       	ori	r18, 0x80	; 128
     354:	fc 01       	movw	r30, r24
     356:	20 83       	st	Z, r18
  cbi(*_ucsrb, UDRIE0);
     358:	8b 81       	ldd	r24, Y+3	; 0x03
     35a:	9c 81       	ldd	r25, Y+4	; 0x04
     35c:	fc 01       	movw	r30, r24
     35e:	82 89       	ldd	r24, Z+18	; 0x12
     360:	93 89       	ldd	r25, Z+19	; 0x13
     362:	2b 81       	ldd	r18, Y+3	; 0x03
     364:	3c 81       	ldd	r19, Y+4	; 0x04
     366:	f9 01       	movw	r30, r18
     368:	22 89       	ldd	r18, Z+18	; 0x12
     36a:	33 89       	ldd	r19, Z+19	; 0x13
     36c:	f9 01       	movw	r30, r18
     36e:	20 81       	ld	r18, Z
     370:	2f 7d       	andi	r18, 0xDF	; 223
     372:	fc 01       	movw	r30, r24
     374:	20 83       	st	Z, r18
}
     376:	61 96       	adiw	r28, 0x11	; 17
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	f8 94       	cli
     37c:	de bf       	out	0x3e, r29	; 62
     37e:	0f be       	out	0x3f, r0	; 63
     380:	cd bf       	out	0x3d, r28	; 61
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	08 95       	ret

00000388 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	00 d0       	rcall	.+0      	; 0x38e <_ZN14HardwareSerial9availableEv+0x6>
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	9a 83       	std	Y+2, r25	; 0x02
     394:	89 83       	std	Y+1, r24	; 0x01
  return (int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail) % SERIAL_RX_BUFFER_SIZE;
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	9a 81       	ldd	r25, Y+2	; 0x02
     39a:	fc 01       	movw	r30, r24
     39c:	81 8d       	ldd	r24, Z+25	; 0x19
     39e:	88 2f       	mov	r24, r24
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	9c 01       	movw	r18, r24
     3a4:	20 5c       	subi	r18, 0xC0	; 192
     3a6:	3f 4f       	sbci	r19, 0xFF	; 255
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	9a 81       	ldd	r25, Y+2	; 0x02
     3ac:	fc 01       	movw	r30, r24
     3ae:	82 8d       	ldd	r24, Z+26	; 0x1a
     3b0:	88 2f       	mov	r24, r24
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	a9 01       	movw	r20, r18
     3b6:	48 1b       	sub	r20, r24
     3b8:	59 0b       	sbc	r21, r25
     3ba:	ca 01       	movw	r24, r20
     3bc:	8f 73       	andi	r24, 0x3F	; 63
     3be:	90 78       	andi	r25, 0x80	; 128
     3c0:	99 23       	and	r25, r25
     3c2:	24 f4       	brge	.+8      	; 0x3cc <_ZN14HardwareSerial9availableEv+0x44>
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	80 6c       	ori	r24, 0xC0	; 192
     3c8:	9f 6f       	ori	r25, 0xFF	; 255
     3ca:	01 96       	adiw	r24, 0x01	; 1
}
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	00 d0       	rcall	.+0      	; 0x3dc <_ZN14HardwareSerial4peekEv+0x6>
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	9a 83       	std	Y+2, r25	; 0x02
     3e2:	89 83       	std	Y+1, r24	; 0x01
  if (_rx_buffer_head == _rx_buffer_tail) {
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	fc 01       	movw	r30, r24
     3ea:	21 8d       	ldd	r18, Z+25	; 0x19
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	9a 81       	ldd	r25, Y+2	; 0x02
     3f0:	fc 01       	movw	r30, r24
     3f2:	92 8d       	ldd	r25, Z+26	; 0x1a
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	29 17       	cp	r18, r25
     3f8:	09 f0       	breq	.+2      	; 0x3fc <_ZN14HardwareSerial4peekEv+0x26>
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	88 23       	and	r24, r24
     3fe:	19 f0       	breq	.+6      	; 0x406 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	9f ef       	ldi	r25, 0xFF	; 255
     404:	0f c0       	rjmp	.+30     	; 0x424 <_ZN14HardwareSerial4peekEv+0x4e>
  } else {
    return _rx_buffer[_rx_buffer_tail];
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	9a 81       	ldd	r25, Y+2	; 0x02
     40a:	fc 01       	movw	r30, r24
     40c:	82 8d       	ldd	r24, Z+26	; 0x1a
     40e:	88 2f       	mov	r24, r24
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	29 81       	ldd	r18, Y+1	; 0x01
     414:	3a 81       	ldd	r19, Y+2	; 0x02
     416:	82 0f       	add	r24, r18
     418:	93 1f       	adc	r25, r19
     41a:	4d 96       	adiw	r24, 0x1d	; 29
     41c:	fc 01       	movw	r30, r24
     41e:	80 81       	ld	r24, Z
     420:	88 2f       	mov	r24, r24
     422:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <_ZN14HardwareSerial4readEv+0x6>
     434:	1f 92       	push	r1
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	9b 83       	std	Y+3, r25	; 0x03
     43c:	8a 83       	std	Y+2, r24	; 0x02
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     43e:	8a 81       	ldd	r24, Y+2	; 0x02
     440:	9b 81       	ldd	r25, Y+3	; 0x03
     442:	fc 01       	movw	r30, r24
     444:	21 8d       	ldd	r18, Z+25	; 0x19
     446:	8a 81       	ldd	r24, Y+2	; 0x02
     448:	9b 81       	ldd	r25, Y+3	; 0x03
     44a:	fc 01       	movw	r30, r24
     44c:	92 8d       	ldd	r25, Z+26	; 0x1a
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	29 17       	cp	r18, r25
     452:	09 f0       	breq	.+2      	; 0x456 <_ZN14HardwareSerial4readEv+0x28>
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	88 23       	and	r24, r24
     458:	19 f0       	breq	.+6      	; 0x460 <_ZN14HardwareSerial4readEv+0x32>
    return -1;
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	9f ef       	ldi	r25, 0xFF	; 255
     45e:	1c c0       	rjmp	.+56     	; 0x498 <_ZN14HardwareSerial4readEv+0x6a>
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     460:	8a 81       	ldd	r24, Y+2	; 0x02
     462:	9b 81       	ldd	r25, Y+3	; 0x03
     464:	fc 01       	movw	r30, r24
     466:	82 8d       	ldd	r24, Z+26	; 0x1a
     468:	88 2f       	mov	r24, r24
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	2a 81       	ldd	r18, Y+2	; 0x02
     46e:	3b 81       	ldd	r19, Y+3	; 0x03
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	4d 96       	adiw	r24, 0x1d	; 29
     476:	fc 01       	movw	r30, r24
     478:	80 81       	ld	r24, Z
     47a:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	9b 81       	ldd	r25, Y+3	; 0x03
     480:	fc 01       	movw	r30, r24
     482:	82 8d       	ldd	r24, Z+26	; 0x1a
     484:	8f 5f       	subi	r24, 0xFF	; 255
     486:	28 2f       	mov	r18, r24
     488:	2f 73       	andi	r18, 0x3F	; 63
     48a:	8a 81       	ldd	r24, Y+2	; 0x02
     48c:	9b 81       	ldd	r25, Y+3	; 0x03
     48e:	fc 01       	movw	r30, r24
     490:	22 8f       	std	Z+26, r18	; 0x1a
    return c;
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	88 2f       	mov	r24, r24
     496:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	08 95       	ret

000004a4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <_ZN14HardwareSerial5flushEv+0x6>
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	9a 83       	std	Y+2, r25	; 0x02
     4b0:	89 83       	std	Y+1, r24	; 0x01
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	9a 81       	ldd	r25, Y+2	; 0x02
     4b6:	fc 01       	movw	r30, r24
     4b8:	90 8d       	ldd	r25, Z+24	; 0x18
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	89 27       	eor	r24, r25
     4be:	88 23       	and	r24, r24
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <_ZN14HardwareSerial5flushEv+0x20>
    return;
     4c2:	4d c0       	rjmp	.+154    	; 0x55e <_ZN14HardwareSerial5flushEv+0xba>

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     4c4:	2c c0       	rjmp	.+88     	; 0x51e <_ZN14HardwareSerial5flushEv+0x7a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     4c6:	8f e5       	ldi	r24, 0x5F	; 95
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	fc 01       	movw	r30, r24
     4cc:	80 81       	ld	r24, Z
     4ce:	88 23       	and	r24, r24
     4d0:	7c f0       	brlt	.+30     	; 0x4f0 <_ZN14HardwareSerial5flushEv+0x4c>
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	9a 81       	ldd	r25, Y+2	; 0x02
     4d6:	fc 01       	movw	r30, r24
     4d8:	82 89       	ldd	r24, Z+18	; 0x12
     4da:	93 89       	ldd	r25, Z+19	; 0x13
     4dc:	fc 01       	movw	r30, r24
     4de:	80 81       	ld	r24, Z
     4e0:	88 2f       	mov	r24, r24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	80 72       	andi	r24, 0x20	; 32
     4e6:	99 27       	eor	r25, r25
     4e8:	00 97       	sbiw	r24, 0x00	; 0
     4ea:	11 f0       	breq	.+4      	; 0x4f0 <_ZN14HardwareSerial5flushEv+0x4c>
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <_ZN14HardwareSerial5flushEv+0x4e>
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	88 23       	and	r24, r24
     4f4:	a1 f0       	breq	.+40     	; 0x51e <_ZN14HardwareSerial5flushEv+0x7a>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	9a 81       	ldd	r25, Y+2	; 0x02
     4fa:	fc 01       	movw	r30, r24
     4fc:	80 89       	ldd	r24, Z+16	; 0x10
     4fe:	91 89       	ldd	r25, Z+17	; 0x11
     500:	fc 01       	movw	r30, r24
     502:	80 81       	ld	r24, Z
     504:	88 2f       	mov	r24, r24
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	80 72       	andi	r24, 0x20	; 32
     50a:	99 27       	eor	r25, r25
     50c:	21 e0       	ldi	r18, 0x01	; 1
     50e:	00 97       	sbiw	r24, 0x00	; 0
     510:	09 f4       	brne	.+2      	; 0x514 <_ZN14HardwareSerial5flushEv+0x70>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	22 23       	and	r18, r18
     516:	19 f0       	breq	.+6      	; 0x51e <_ZN14HardwareSerial5flushEv+0x7a>
	  _tx_udr_empty_irq();
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	9a 81       	ldd	r25, Y+2	; 0x02
     51c:	18 de       	rcall	.-976    	; 0x14e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     51e:	89 81       	ldd	r24, Y+1	; 0x01
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	fc 01       	movw	r30, r24
     524:	82 89       	ldd	r24, Z+18	; 0x12
     526:	93 89       	ldd	r25, Z+19	; 0x13
     528:	fc 01       	movw	r30, r24
     52a:	80 81       	ld	r24, Z
     52c:	88 2f       	mov	r24, r24
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	80 72       	andi	r24, 0x20	; 32
     532:	99 27       	eor	r25, r25
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	69 f4       	brne	.+26     	; 0x552 <_ZN14HardwareSerial5flushEv+0xae>
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	fc 01       	movw	r30, r24
     53e:	80 89       	ldd	r24, Z+16	; 0x10
     540:	91 89       	ldd	r25, Z+17	; 0x11
     542:	fc 01       	movw	r30, r24
     544:	80 81       	ld	r24, Z
     546:	88 2f       	mov	r24, r24
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	80 74       	andi	r24, 0x40	; 64
     54c:	99 27       	eor	r25, r25
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	11 f4       	brne	.+4      	; 0x556 <_ZN14HardwareSerial5flushEv+0xb2>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	01 c0       	rjmp	.+2      	; 0x558 <_ZN14HardwareSerial5flushEv+0xb4>
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	88 23       	and	r24, r24
     55a:	09 f0       	breq	.+2      	; 0x55e <_ZN14HardwareSerial5flushEv+0xba>
     55c:	b4 cf       	rjmp	.-152    	; 0x4c6 <_ZN14HardwareSerial5flushEv+0x22>
     55e:	0f 90       	pop	r0
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     560:	0f 90       	pop	r0
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	00 d0       	rcall	.+0      	; 0x56e <_ZN14HardwareSerial5writeEh+0x6>
     56e:	00 d0       	rcall	.+0      	; 0x570 <_ZN14HardwareSerial5writeEh+0x8>
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	9b 83       	std	Y+3, r25	; 0x03
     576:	8a 83       	std	Y+2, r24	; 0x02
     578:	6c 83       	std	Y+4, r22	; 0x04
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	9b 81       	ldd	r25, Y+3	; 0x03
     57e:	fc 01       	movw	r30, r24
     580:	23 8d       	ldd	r18, Z+27	; 0x1b
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	9b 81       	ldd	r25, Y+3	; 0x03
     586:	fc 01       	movw	r30, r24
     588:	84 8d       	ldd	r24, Z+28	; 0x1c
     58a:	28 17       	cp	r18, r24
     58c:	79 f4       	brne	.+30     	; 0x5ac <_ZN14HardwareSerial5writeEh+0x44>
     58e:	8a 81       	ldd	r24, Y+2	; 0x02
     590:	9b 81       	ldd	r25, Y+3	; 0x03
     592:	fc 01       	movw	r30, r24
     594:	80 89       	ldd	r24, Z+16	; 0x10
     596:	91 89       	ldd	r25, Z+17	; 0x11
     598:	fc 01       	movw	r30, r24
     59a:	80 81       	ld	r24, Z
     59c:	88 2f       	mov	r24, r24
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	80 72       	andi	r24, 0x20	; 32
     5a2:	99 27       	eor	r25, r25
     5a4:	00 97       	sbiw	r24, 0x00	; 0
     5a6:	11 f0       	breq	.+4      	; 0x5ac <_ZN14HardwareSerial5writeEh+0x44>
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_ZN14HardwareSerial5writeEh+0x46>
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	88 23       	and	r24, r24
     5b0:	d1 f0       	breq	.+52     	; 0x5e6 <_ZN14HardwareSerial5writeEh+0x7e>
    *_udr = c;
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	9b 81       	ldd	r25, Y+3	; 0x03
     5b6:	fc 01       	movw	r30, r24
     5b8:	86 89       	ldd	r24, Z+22	; 0x16
     5ba:	97 89       	ldd	r25, Z+23	; 0x17
     5bc:	2c 81       	ldd	r18, Y+4	; 0x04
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18
    sbi(*_ucsra, TXC0);
     5c2:	8a 81       	ldd	r24, Y+2	; 0x02
     5c4:	9b 81       	ldd	r25, Y+3	; 0x03
     5c6:	fc 01       	movw	r30, r24
     5c8:	80 89       	ldd	r24, Z+16	; 0x10
     5ca:	91 89       	ldd	r25, Z+17	; 0x11
     5cc:	2a 81       	ldd	r18, Y+2	; 0x02
     5ce:	3b 81       	ldd	r19, Y+3	; 0x03
     5d0:	f9 01       	movw	r30, r18
     5d2:	20 89       	ldd	r18, Z+16	; 0x10
     5d4:	31 89       	ldd	r19, Z+17	; 0x11
     5d6:	f9 01       	movw	r30, r18
     5d8:	20 81       	ld	r18, Z
     5da:	20 64       	ori	r18, 0x40	; 64
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
    return 1;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	64 c0       	rjmp	.+200    	; 0x6ae <_ZN14HardwareSerial5writeEh+0x146>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ea:	fc 01       	movw	r30, r24
     5ec:	83 8d       	ldd	r24, Z+27	; 0x1b
     5ee:	88 2f       	mov	r24, r24
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	8f 73       	andi	r24, 0x3F	; 63
     5f6:	90 78       	andi	r25, 0x80	; 128
     5f8:	99 23       	and	r25, r25
     5fa:	24 f4       	brge	.+8      	; 0x604 <_ZN14HardwareSerial5writeEh+0x9c>
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	80 6c       	ori	r24, 0xC0	; 192
     600:	9f 6f       	ori	r25, 0xFF	; 255
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	89 83       	std	Y+1, r24	; 0x01
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     606:	1e c0       	rjmp	.+60     	; 0x644 <_ZN14HardwareSerial5writeEh+0xdc>
    if (bit_is_clear(SREG, SREG_I)) {
     608:	8f e5       	ldi	r24, 0x5F	; 95
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	fc 01       	movw	r30, r24
     60e:	80 81       	ld	r24, Z
     610:	80 95       	com	r24
     612:	88 1f       	adc	r24, r24
     614:	88 27       	eor	r24, r24
     616:	88 1f       	adc	r24, r24
     618:	88 23       	and	r24, r24
     61a:	a1 f0       	breq	.+40     	; 0x644 <_ZN14HardwareSerial5writeEh+0xdc>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     61c:	8a 81       	ldd	r24, Y+2	; 0x02
     61e:	9b 81       	ldd	r25, Y+3	; 0x03
     620:	fc 01       	movw	r30, r24
     622:	80 89       	ldd	r24, Z+16	; 0x10
     624:	91 89       	ldd	r25, Z+17	; 0x11
     626:	fc 01       	movw	r30, r24
     628:	80 81       	ld	r24, Z
     62a:	88 2f       	mov	r24, r24
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	80 72       	andi	r24, 0x20	; 32
     630:	99 27       	eor	r25, r25
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	00 97       	sbiw	r24, 0x00	; 0
     636:	09 f4       	brne	.+2      	; 0x63a <_ZN14HardwareSerial5writeEh+0xd2>
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	22 23       	and	r18, r18
     63c:	19 f0       	breq	.+6      	; 0x644 <_ZN14HardwareSerial5writeEh+0xdc>
	_tx_udr_empty_irq();
     63e:	8a 81       	ldd	r24, Y+2	; 0x02
     640:	9b 81       	ldd	r25, Y+3	; 0x03
     642:	85 dd       	rcall	.-1270   	; 0x14e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     644:	8a 81       	ldd	r24, Y+2	; 0x02
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     646:	9b 81       	ldd	r25, Y+3	; 0x03
     648:	fc 01       	movw	r30, r24
     64a:	24 8d       	ldd	r18, Z+28	; 0x1c
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	99 81       	ldd	r25, Y+1	; 0x01
     650:	29 17       	cp	r18, r25
     652:	09 f0       	breq	.+2      	; 0x656 <_ZN14HardwareSerial5writeEh+0xee>
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	88 23       	and	r24, r24
     658:	b9 f6       	brne	.-82     	; 0x608 <_ZN14HardwareSerial5writeEh+0xa0>
     65a:	8a 81       	ldd	r24, Y+2	; 0x02
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     65c:	9b 81       	ldd	r25, Y+3	; 0x03
     65e:	fc 01       	movw	r30, r24
     660:	83 8d       	ldd	r24, Z+27	; 0x1b
     662:	88 2f       	mov	r24, r24
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	2a 81       	ldd	r18, Y+2	; 0x02
     668:	3b 81       	ldd	r19, Y+3	; 0x03
     66a:	82 0f       	add	r24, r18
     66c:	93 1f       	adc	r25, r19
     66e:	83 5a       	subi	r24, 0xA3	; 163
     670:	9f 4f       	sbci	r25, 0xFF	; 255
     672:	2c 81       	ldd	r18, Y+4	; 0x04
     674:	fc 01       	movw	r30, r24
     676:	20 83       	st	Z, r18
     678:	8a 81       	ldd	r24, Y+2	; 0x02
  _tx_buffer_head = i;
     67a:	9b 81       	ldd	r25, Y+3	; 0x03
     67c:	29 81       	ldd	r18, Y+1	; 0x01
     67e:	fc 01       	movw	r30, r24
     680:	23 8f       	std	Z+27, r18	; 0x1b
     682:	8a 81       	ldd	r24, Y+2	; 0x02
	
  sbi(*_ucsrb, UDRIE0);
     684:	9b 81       	ldd	r25, Y+3	; 0x03
     686:	fc 01       	movw	r30, r24
     688:	82 89       	ldd	r24, Z+18	; 0x12
     68a:	93 89       	ldd	r25, Z+19	; 0x13
     68c:	2a 81       	ldd	r18, Y+2	; 0x02
     68e:	3b 81       	ldd	r19, Y+3	; 0x03
     690:	f9 01       	movw	r30, r18
     692:	22 89       	ldd	r18, Z+18	; 0x12
     694:	33 89       	ldd	r19, Z+19	; 0x13
     696:	f9 01       	movw	r30, r18
     698:	20 81       	ld	r18, Z
     69a:	20 62       	ori	r18, 0x20	; 32
     69c:	fc 01       	movw	r30, r24
     69e:	20 83       	st	Z, r18
     6a0:	8a 81       	ldd	r24, Y+2	; 0x02
  _written = true;
     6a2:	9b 81       	ldd	r25, Y+3	; 0x03
     6a4:	21 e0       	ldi	r18, 0x01	; 1
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 8f       	std	Z+24, r18	; 0x18
     6aa:	81 e0       	ldi	r24, 0x01	; 1
  
  return 1;
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0f 90       	pop	r0
}
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <_ZN5PrintC1Ev+0x6>
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	2b e3       	ldi	r18, 0x3B	; 59
     6d0:	31 e0       	ldi	r19, 0x01	; 1
     6d2:	fc 01       	movw	r30, r24
     6d4:	31 83       	std	Z+1, r19	; 0x01
     6d6:	20 83       	st	Z, r18
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	9a 81       	ldd	r25, Y+2	; 0x02
     6dc:	fc 01       	movw	r30, r24
     6de:	13 82       	std	Z+3, r1	; 0x03
     6e0:	12 82       	std	Z+2, r1	; 0x02
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <_ZN6StreamC1Ev+0x6>
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	9a 83       	std	Y+2, r25	; 0x02
     6f8:	89 83       	std	Y+1, r24	; 0x01
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	9a 81       	ldd	r25, Y+2	; 0x02
     6fe:	de df       	rcall	.-68     	; 0x6bc <_ZN5PrintC1Ev>
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	2f e1       	ldi	r18, 0x1F	; 31
     706:	31 e0       	ldi	r19, 0x01	; 1
     708:	fc 01       	movw	r30, r24
     70a:	31 83       	std	Z+1, r19	; 0x01
     70c:	20 83       	st	Z, r18
     70e:	29 81       	ldd	r18, Y+1	; 0x01
     710:	3a 81       	ldd	r19, Y+2	; 0x02
     712:	88 ee       	ldi	r24, 0xE8	; 232
     714:	93 e0       	ldi	r25, 0x03	; 3
     716:	a0 e0       	ldi	r26, 0x00	; 0
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	f9 01       	movw	r30, r18
     71c:	84 83       	std	Z+4, r24	; 0x04
     71e:	95 83       	std	Z+5, r25	; 0x05
     720:	a6 83       	std	Z+6, r26	; 0x06
     722:	b7 83       	std	Z+7, r27	; 0x07
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>:
#error "Not all bit positions for UART3 are the same as for UART0"
#endif

// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(
     72e:	cf 92       	push	r12
     730:	df 92       	push	r13
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	2e 97       	sbiw	r28, 0x0e	; 14
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
     74e:	9a 83       	std	Y+2, r25	; 0x02
     750:	89 83       	std	Y+1, r24	; 0x01
     752:	7c 83       	std	Y+4, r23	; 0x04
     754:	6b 83       	std	Y+3, r22	; 0x03
     756:	5e 83       	std	Y+6, r21	; 0x06
     758:	4d 83       	std	Y+5, r20	; 0x05
     75a:	38 87       	std	Y+8, r19	; 0x08
     75c:	2f 83       	std	Y+7, r18	; 0x07
     75e:	1a 87       	std	Y+10, r17	; 0x0a
     760:	09 87       	std	Y+9, r16	; 0x09
     762:	fc 86       	std	Y+12, r15	; 0x0c
     764:	eb 86       	std	Y+11, r14	; 0x0b
     766:	de 86       	std	Y+14, r13	; 0x0e
     768:	cd 86       	std	Y+13, r12	; 0x0d
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	9a 81       	ldd	r25, Y+2	; 0x02
     76e:	be df       	rcall	.-132    	; 0x6ec <_ZN6StreamC1Ev>
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	9a 81       	ldd	r25, Y+2	; 0x02
     774:	2f e0       	ldi	r18, 0x0F	; 15
     776:	31 e0       	ldi	r19, 0x01	; 1
     778:	fc 01       	movw	r30, r24
     77a:	31 83       	std	Z+1, r19	; 0x01
     77c:	20 83       	st	Z, r18
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	9a 81       	ldd	r25, Y+2	; 0x02
     782:	2b 81       	ldd	r18, Y+3	; 0x03
     784:	3c 81       	ldd	r19, Y+4	; 0x04
     786:	fc 01       	movw	r30, r24
     788:	35 87       	std	Z+13, r19	; 0x0d
     78a:	24 87       	std	Z+12, r18	; 0x0c
     78c:	89 81       	ldd	r24, Y+1	; 0x01
     78e:	9a 81       	ldd	r25, Y+2	; 0x02
     790:	2d 81       	ldd	r18, Y+5	; 0x05
     792:	3e 81       	ldd	r19, Y+6	; 0x06
     794:	fc 01       	movw	r30, r24
     796:	37 87       	std	Z+15, r19	; 0x0f
     798:	26 87       	std	Z+14, r18	; 0x0e
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	2f 81       	ldd	r18, Y+7	; 0x07
     7a0:	38 85       	ldd	r19, Y+8	; 0x08
     7a2:	fc 01       	movw	r30, r24
     7a4:	31 8b       	std	Z+17, r19	; 0x11
     7a6:	20 8b       	std	Z+16, r18	; 0x10
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	9a 81       	ldd	r25, Y+2	; 0x02
     7ac:	29 85       	ldd	r18, Y+9	; 0x09
     7ae:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b0:	fc 01       	movw	r30, r24
     7b2:	33 8b       	std	Z+19, r19	; 0x13
     7b4:	22 8b       	std	Z+18, r18	; 0x12
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ba:	2b 85       	ldd	r18, Y+11	; 0x0b
     7bc:	3c 85       	ldd	r19, Y+12	; 0x0c
     7be:	fc 01       	movw	r30, r24
     7c0:	35 8b       	std	Z+21, r19	; 0x15
     7c2:	24 8b       	std	Z+20, r18	; 0x14
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	2d 85       	ldd	r18, Y+13	; 0x0d
     7ca:	3e 85       	ldd	r19, Y+14	; 0x0e
     7cc:	fc 01       	movw	r30, r24
     7ce:	37 8b       	std	Z+23, r19	; 0x17
     7d0:	26 8b       	std	Z+22, r18	; 0x16
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	fc 01       	movw	r30, r24
     7d8:	11 8e       	std	Z+25, r1	; 0x19
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	fc 01       	movw	r30, r24
     7e0:	12 8e       	std	Z+26, r1	; 0x1a
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	9a 81       	ldd	r25, Y+2	; 0x02
     7e6:	fc 01       	movw	r30, r24
     7e8:	13 8e       	std	Z+27, r1	; 0x1b
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	9a 81       	ldd	r25, Y+2	; 0x02
     7ee:	fc 01       	movw	r30, r24
     7f0:	14 8e       	std	Z+28, r1	; 0x1c
     7f2:	2e 96       	adiw	r28, 0x0e	; 14
{
}
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	df 90       	pop	r13
     80c:	cf 90       	pop	r12
     80e:	08 95       	ret

00000810 <_ZN14HardwareSerial16_rx_complete_irqEv>:

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	00 d0       	rcall	.+0      	; 0x816 <_ZN14HardwareSerial16_rx_complete_irqEv+0x6>
     816:	00 d0       	rcall	.+0      	; 0x818 <_ZN14HardwareSerial16_rx_complete_irqEv+0x8>
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	9c 83       	std	Y+4, r25	; 0x04
     81e:	8b 83       	std	Y+3, r24	; 0x03
  if (bit_is_clear(*_ucsra, UPE0)) {
     820:	8b 81       	ldd	r24, Y+3	; 0x03
     822:	9c 81       	ldd	r25, Y+4	; 0x04
     824:	fc 01       	movw	r30, r24
     826:	80 89       	ldd	r24, Z+16	; 0x10
     828:	91 89       	ldd	r25, Z+17	; 0x11
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	88 2f       	mov	r24, r24
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	84 70       	andi	r24, 0x04	; 4
     834:	99 27       	eor	r25, r25
     836:	21 e0       	ldi	r18, 0x01	; 1
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	09 f0       	breq	.+2      	; 0x83e <_ZN14HardwareSerial16_rx_complete_irqEv+0x2e>
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	22 23       	and	r18, r18
     840:	71 f1       	breq	.+92     	; 0x89e <_ZN14HardwareSerial16_rx_complete_irqEv+0x8e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	9c 81       	ldd	r25, Y+4	; 0x04
     846:	fc 01       	movw	r30, r24
     848:	86 89       	ldd	r24, Z+22	; 0x16
     84a:	97 89       	ldd	r25, Z+23	; 0x17
     84c:	fc 01       	movw	r30, r24
     84e:	80 81       	ld	r24, Z
     850:	89 83       	std	Y+1, r24	; 0x01
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	9c 81       	ldd	r25, Y+4	; 0x04
     856:	fc 01       	movw	r30, r24
     858:	81 8d       	ldd	r24, Z+25	; 0x19
     85a:	8f 5f       	subi	r24, 0xFF	; 255
     85c:	8f 73       	andi	r24, 0x3F	; 63
     85e:	8a 83       	std	Y+2, r24	; 0x02

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     860:	8b 81       	ldd	r24, Y+3	; 0x03
     862:	9c 81       	ldd	r25, Y+4	; 0x04
     864:	fc 01       	movw	r30, r24
     866:	22 8d       	ldd	r18, Z+26	; 0x1a
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	9a 81       	ldd	r25, Y+2	; 0x02
     86c:	29 17       	cp	r18, r25
     86e:	09 f4       	brne	.+2      	; 0x872 <_ZN14HardwareSerial16_rx_complete_irqEv+0x62>
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	88 23       	and	r24, r24
     874:	99 f0       	breq	.+38     	; 0x89c <_ZN14HardwareSerial16_rx_complete_irqEv+0x8c>
      _rx_buffer[_rx_buffer_head] = c;
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	9c 81       	ldd	r25, Y+4	; 0x04
     87a:	fc 01       	movw	r30, r24
     87c:	81 8d       	ldd	r24, Z+25	; 0x19
     87e:	88 2f       	mov	r24, r24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	2b 81       	ldd	r18, Y+3	; 0x03
     884:	3c 81       	ldd	r19, Y+4	; 0x04
     886:	82 0f       	add	r24, r18
     888:	93 1f       	adc	r25, r19
     88a:	4d 96       	adiw	r24, 0x1d	; 29
     88c:	29 81       	ldd	r18, Y+1	; 0x01
     88e:	fc 01       	movw	r30, r24
     890:	20 83       	st	Z, r18
      _rx_buffer_head = i;
     892:	8b 81       	ldd	r24, Y+3	; 0x03
     894:	9c 81       	ldd	r25, Y+4	; 0x04
     896:	2a 81       	ldd	r18, Y+2	; 0x02
     898:	fc 01       	movw	r30, r24
     89a:	21 8f       	std	Z+25, r18	; 0x19
     89c:	07 c0       	rjmp	.+14     	; 0x8ac <_ZN14HardwareSerial16_rx_complete_irqEv+0x9c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	9c 81       	ldd	r25, Y+4	; 0x04
     8a2:	fc 01       	movw	r30, r24
     8a4:	86 89       	ldd	r24, Z+22	; 0x16
     8a6:	97 89       	ldd	r25, Z+23	; 0x17
     8a8:	fc 01       	movw	r30, r24
     8aa:	80 81       	ld	r24, Z
  };
}
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	00 90 5f 00 	lds	r0, 0x005F
     8c2:	0f 92       	push	r0
     8c4:	11 24       	eor	r1, r1
     8c6:	2f 93       	push	r18
     8c8:	3f 93       	push	r19
     8ca:	4f 93       	push	r20
     8cc:	5f 93       	push	r21
     8ce:	6f 93       	push	r22
     8d0:	7f 93       	push	r23
     8d2:	8f 93       	push	r24
     8d4:	9f 93       	push	r25
     8d6:	af 93       	push	r26
     8d8:	bf 93       	push	r27
     8da:	ef 93       	push	r30
     8dc:	ff 93       	push	r31
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
    Serial._rx_complete_irq();
     8e6:	80 e4       	ldi	r24, 0x40	; 64
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	92 df       	rcall	.-220    	; 0x810 <_ZN14HardwareSerial16_rx_complete_irqEv>
     8ec:	df 91       	pop	r29
  }
     8ee:	cf 91       	pop	r28
     8f0:	ff 91       	pop	r31
     8f2:	ef 91       	pop	r30
     8f4:	bf 91       	pop	r27
     8f6:	af 91       	pop	r26
     8f8:	9f 91       	pop	r25
     8fa:	8f 91       	pop	r24
     8fc:	7f 91       	pop	r23
     8fe:	6f 91       	pop	r22
     900:	5f 91       	pop	r21
     902:	4f 91       	pop	r20
     904:	3f 91       	pop	r19
     906:	2f 91       	pop	r18
     908:	0f 90       	pop	r0
     90a:	00 92 5f 00 	sts	0x005F, r0
     90e:	0f 90       	pop	r0
     910:	1f 90       	pop	r1
     912:	18 95       	reti

00000914 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     914:	1f 92       	push	r1
     916:	0f 92       	push	r0
     918:	00 90 5f 00 	lds	r0, 0x005F
     91c:	0f 92       	push	r0
     91e:	11 24       	eor	r1, r1
     920:	2f 93       	push	r18
     922:	3f 93       	push	r19
     924:	4f 93       	push	r20
     926:	5f 93       	push	r21
     928:	6f 93       	push	r22
     92a:	7f 93       	push	r23
     92c:	8f 93       	push	r24
     92e:	9f 93       	push	r25
     930:	af 93       	push	r26
     932:	bf 93       	push	r27
     934:	ef 93       	push	r30
     936:	ff 93       	push	r31
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
  Serial._tx_udr_empty_irq();
     940:	80 e4       	ldi	r24, 0x40	; 64
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	04 dc       	rcall	.-2040   	; 0x14e <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     946:	df 91       	pop	r29
}
     948:	cf 91       	pop	r28
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	7f 91       	pop	r23
     958:	6f 91       	pop	r22
     95a:	5f 91       	pop	r21
     95c:	4f 91       	pop	r20
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	0f 90       	pop	r0
     964:	00 92 5f 00 	sts	0x005F, r0
     968:	0f 90       	pop	r0
     96a:	1f 90       	pop	r1
     96c:	18 95       	reti

0000096e <_Z17Serial0_availablev>:
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
  return Serial.available();
     976:	80 e4       	ldi	r24, 0x40	; 64
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	06 dd       	rcall	.-1524   	; 0x388 <_ZN14HardwareSerial9availableEv>
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	09 f4       	brne	.+2      	; 0x984 <_Z17Serial0_availablev+0x16>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	82 2f       	mov	r24, r18
     986:	df 91       	pop	r29
}
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <_Z41__static_initialization_and_destruction_0ii>:
     98c:	cf 92       	push	r12
     98e:	df 92       	push	r13
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	00 d0       	rcall	.+0      	; 0x99e <_Z41__static_initialization_and_destruction_0ii+0x12>
     99e:	00 d0       	rcall	.+0      	; 0x9a0 <_Z41__static_initialization_and_destruction_0ii+0x14>
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	9a 83       	std	Y+2, r25	; 0x02
     9a6:	89 83       	std	Y+1, r24	; 0x01
     9a8:	7c 83       	std	Y+4, r23	; 0x04
     9aa:	6b 83       	std	Y+3, r22	; 0x03
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	91 05       	cpc	r25, r1
     9b4:	d9 f4       	brne	.+54     	; 0x9ec <_Z41__static_initialization_and_destruction_0ii+0x60>
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	9c 81       	ldd	r25, Y+4	; 0x04
     9ba:	8f 3f       	cpi	r24, 0xFF	; 255
     9bc:	2f ef       	ldi	r18, 0xFF	; 255
     9be:	92 07       	cpc	r25, r18
     9c0:	a9 f4       	brne	.+42     	; 0x9ec <_Z41__static_initialization_and_destruction_0ii+0x60>
}

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR);
#else
  HardwareSerial Serial(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
     9c2:	0f 2e       	mov	r0, r31
     9c4:	f6 ec       	ldi	r31, 0xC6	; 198
     9c6:	cf 2e       	mov	r12, r31
     9c8:	d1 2c       	mov	r13, r1
     9ca:	f0 2d       	mov	r31, r0
     9cc:	0f 2e       	mov	r0, r31
     9ce:	f2 ec       	ldi	r31, 0xC2	; 194
     9d0:	ef 2e       	mov	r14, r31
     9d2:	f1 2c       	mov	r15, r1
     9d4:	f0 2d       	mov	r31, r0
     9d6:	01 ec       	ldi	r16, 0xC1	; 193
     9d8:	10 e0       	ldi	r17, 0x00	; 0
     9da:	20 ec       	ldi	r18, 0xC0	; 192
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	44 ec       	ldi	r20, 0xC4	; 196
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	65 ec       	ldi	r22, 0xC5	; 197
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	80 e4       	ldi	r24, 0x40	; 64
     9e8:	92 e0       	ldi	r25, 0x02	; 2
     9ea:	a1 de       	rcall	.-702    	; 0x72e <_ZN14HardwareSerialC1EPVhS1_S1_S1_S1_S1_>
     9ec:	0f 90       	pop	r0

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	df 90       	pop	r13
     a02:	cf 90       	pop	r12
     a04:	08 95       	ret

00000a06 <_GLOBAL__sub_I___vector_18>:
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	6f ef       	ldi	r22, 0xFF	; 255
     a10:	7f ef       	ldi	r23, 0xFF	; 255
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	ba df       	rcall	.-140    	; 0x98c <_Z41__static_initialization_and_destruction_0ii>
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <_ZN9PrintableC1Ev>:
    By deriving from Printable and implementing the printTo method, it will then be possible
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/

class Printable
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	00 d0       	rcall	.+0      	; 0xa24 <_ZN9PrintableC1Ev+0x6>
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	9a 81       	ldd	r25, Y+2	; 0x02
     a30:	25 e3       	ldi	r18, 0x35	; 53
     a32:	31 e0       	ldi	r19, 0x01	; 1
     a34:	fc 01       	movw	r30, r24
     a36:	31 83       	std	Z+1, r19	; 0x01
     a38:	20 83       	st	Z, r18
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <_ZN9IPAddressC1Ehhhh>:
#include <stdlib.h>

class Print;

/** The Printable class provides a way for new classes to allow themselves to be printed.
    By deriving from Printable and implementing the printTo method, it will then be possible
     a44:	0f 93       	push	r16
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	00 d0       	rcall	.+0      	; 0xa4c <_ZN9IPAddressC1Ehhhh+0x8>
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <_ZN9IPAddressC1Ehhhh+0xa>
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <_ZN9IPAddressC1Ehhhh+0xc>
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	9a 83       	std	Y+2, r25	; 0x02
     a56:	89 83       	std	Y+1, r24	; 0x01
     a58:	6b 83       	std	Y+3, r22	; 0x03
     a5a:	4c 83       	std	Y+4, r20	; 0x04
     a5c:	2d 83       	std	Y+5, r18	; 0x05
     a5e:	0e 83       	std	Y+6, r16	; 0x06
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
     a64:	dc df       	rcall	.-72     	; 0xa1e <_ZN9PrintableC1Ev>
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	9a 81       	ldd	r25, Y+2	; 0x02
     a6a:	2f e2       	ldi	r18, 0x2F	; 47
     a6c:	31 e0       	ldi	r19, 0x01	; 1
     a6e:	fc 01       	movw	r30, r24
     a70:	31 83       	std	Z+1, r19	; 0x01
     a72:	20 83       	st	Z, r18
     a74:	89 81       	ldd	r24, Y+1	; 0x01
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
     a76:	9a 81       	ldd	r25, Y+2	; 0x02
     a78:	2b 81       	ldd	r18, Y+3	; 0x03
     a7a:	fc 01       	movw	r30, r24
     a7c:	22 83       	std	Z+2, r18	; 0x02
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
*/
     a80:	9a 81       	ldd	r25, Y+2	; 0x02
     a82:	2c 81       	ldd	r18, Y+4	; 0x04
     a84:	fc 01       	movw	r30, r24
     a86:	23 83       	std	Z+3, r18	; 0x03
     a88:	89 81       	ldd	r24, Y+1	; 0x01

     a8a:	9a 81       	ldd	r25, Y+2	; 0x02
     a8c:	2d 81       	ldd	r18, Y+5	; 0x05
     a8e:	fc 01       	movw	r30, r24
     a90:	24 83       	std	Z+4, r18	; 0x04
     a92:	89 81       	ldd	r24, Y+1	; 0x01
class Printable
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	2e 81       	ldd	r18, Y+6	; 0x06
     a98:	fc 01       	movw	r30, r24
     a9a:	25 83       	std	Z+5, r18	; 0x05
     a9c:	26 96       	adiw	r28, 0x06	; 6
{
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	0f 91       	pop	r16
     aae:	08 95       	ret

00000ab0 <_ZNK9IPAddress7printToER5Print>:
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	28 97       	sbiw	r28, 0x08	; 8
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	9e 83       	std	Y+6, r25	; 0x06
     ac6:	8d 83       	std	Y+5, r24	; 0x05
     ac8:	78 87       	std	Y+8, r23	; 0x08
     aca:	6f 83       	std	Y+7, r22	; 0x07
     acc:	1a 82       	std	Y+2, r1	; 0x02
     ace:	19 82       	std	Y+1, r1	; 0x01
     ad0:	1c 82       	std	Y+4, r1	; 0x04
     ad2:	1b 82       	std	Y+3, r1	; 0x03
     ad4:	24 c0       	rjmp	.+72     	; 0xb1e <_ZNK9IPAddress7printToER5Print+0x6e>
     ad6:	2d 81       	ldd	r18, Y+5	; 0x05
     ad8:	3e 81       	ldd	r19, Y+6	; 0x06
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	82 0f       	add	r24, r18
     ae0:	93 1f       	adc	r25, r19
     ae2:	02 96       	adiw	r24, 0x02	; 2
     ae4:	fc 01       	movw	r30, r24
     ae6:	20 81       	ld	r18, Z
     ae8:	8f 81       	ldd	r24, Y+7	; 0x07
     aea:	98 85       	ldd	r25, Y+8	; 0x08
     aec:	4a e0       	ldi	r20, 0x0A	; 10
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	62 2f       	mov	r22, r18
     af2:	fa d0       	rcall	.+500    	; 0xce8 <_ZN5Print5printEhi>
     af4:	29 81       	ldd	r18, Y+1	; 0x01
     af6:	3a 81       	ldd	r19, Y+2	; 0x02
     af8:	82 0f       	add	r24, r18
     afa:	93 1f       	adc	r25, r19
     afc:	9a 83       	std	Y+2, r25	; 0x02
     afe:	89 83       	std	Y+1, r24	; 0x01
     b00:	8f 81       	ldd	r24, Y+7	; 0x07
     b02:	98 85       	ldd	r25, Y+8	; 0x08
     b04:	6e e2       	ldi	r22, 0x2E	; 46
     b06:	d4 d0       	rcall	.+424    	; 0xcb0 <_ZN5Print5printEc>
     b08:	29 81       	ldd	r18, Y+1	; 0x01
     b0a:	3a 81       	ldd	r19, Y+2	; 0x02
     b0c:	82 0f       	add	r24, r18
     b0e:	93 1f       	adc	r25, r19
     b10:	9a 83       	std	Y+2, r25	; 0x02
     b12:	89 83       	std	Y+1, r24	; 0x01
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	9c 83       	std	Y+4, r25	; 0x04
     b1c:	8b 83       	std	Y+3, r24	; 0x03
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	9c 81       	ldd	r25, Y+4	; 0x04
     b22:	83 30       	cpi	r24, 0x03	; 3
     b24:	91 05       	cpc	r25, r1
     b26:	bc f2       	brlt	.-82     	; 0xad6 <_ZNK9IPAddress7printToER5Print+0x26>
     b28:	8d 81       	ldd	r24, Y+5	; 0x05
     b2a:	9e 81       	ldd	r25, Y+6	; 0x06
     b2c:	fc 01       	movw	r30, r24
     b2e:	25 81       	ldd	r18, Z+5	; 0x05
     b30:	8f 81       	ldd	r24, Y+7	; 0x07
     b32:	98 85       	ldd	r25, Y+8	; 0x08
     b34:	4a e0       	ldi	r20, 0x0A	; 10
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	62 2f       	mov	r22, r18
     b3a:	d6 d0       	rcall	.+428    	; 0xce8 <_ZN5Print5printEhi>
     b3c:	29 81       	ldd	r18, Y+1	; 0x01
     b3e:	3a 81       	ldd	r19, Y+2	; 0x02
     b40:	82 0f       	add	r24, r18
     b42:	93 1f       	adc	r25, r19
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	89 83       	std	Y+1, r24	; 0x01
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	9a 81       	ldd	r25, Y+2	; 0x02
     b4c:	28 96       	adiw	r28, 0x08	; 8
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <_Z41__static_initialization_and_destruction_0ii>:
     b5e:	0f 93       	push	r16
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	00 d0       	rcall	.+0      	; 0xb66 <_Z41__static_initialization_and_destruction_0ii+0x8>
     b66:	00 d0       	rcall	.+0      	; 0xb68 <_Z41__static_initialization_and_destruction_0ii+0xa>
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	9a 83       	std	Y+2, r25	; 0x02
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	7c 83       	std	Y+4, r23	; 0x04
     b72:	6b 83       	std	Y+3, r22	; 0x03
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	9a 81       	ldd	r25, Y+2	; 0x02
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	69 f4       	brne	.+26     	; 0xb98 <_Z41__static_initialization_and_destruction_0ii+0x3a>
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	8f 3f       	cpi	r24, 0xFF	; 255
     b84:	2f ef       	ldi	r18, 0xFF	; 255
     b86:	92 07       	cpc	r25, r18
     b88:	39 f4       	brne	.+14     	; 0xb98 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
     b8a:	00 e0       	ldi	r16, 0x00	; 0
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	8d ed       	ldi	r24, 0xDD	; 221
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	56 df       	rcall	.-340    	; 0xa44 <_ZN9IPAddressC1Ehhhh>
     b98:	0f 90       	pop	r0
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	0f 91       	pop	r16
     ba6:	08 95       	ret

00000ba8 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	6f ef       	ldi	r22, 0xFF	; 255
     bb2:	7f ef       	ldi	r23, 0xFF	; 255
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	d2 df       	rcall	.-92     	; 0xb5e <_Z41__static_initialization_and_destruction_0ii>
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	08 95       	ret

00000bc0 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	00 d0       	rcall	.+0      	; 0xbca <_ZN5Print5writeEPKc+0xa>
     bca:	00 d0       	rcall	.+0      	; 0xbcc <_ZN5Print5writeEPKc+0xc>
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	9a 83       	std	Y+2, r25	; 0x02
     bd2:	89 83       	std	Y+1, r24	; 0x01
     bd4:	7c 83       	std	Y+4, r23	; 0x04
     bd6:	6b 83       	std	Y+3, r22	; 0x03
      if (str == NULL) return 0;
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	00 97       	sbiw	r24, 0x00	; 0
     bde:	19 f4       	brne	.+6      	; 0xbe6 <_ZN5Print5writeEPKc+0x26>
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	15 c0       	rjmp	.+42     	; 0xc10 <_ZN5Print5writeEPKc+0x50>
      return write((const uint8_t *)str, strlen(str));
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	fc 01       	movw	r30, r24
     bec:	80 81       	ld	r24, Z
     bee:	91 81       	ldd	r25, Z+1	; 0x01
     bf0:	02 96       	adiw	r24, 0x02	; 2
     bf2:	fc 01       	movw	r30, r24
     bf4:	00 81       	ld	r16, Z
     bf6:	11 81       	ldd	r17, Z+1	; 0x01
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	9c 81       	ldd	r25, Y+4	; 0x04
     bfc:	0e 94 73 10 	call	0x20e6	; 0x20e6 <strlen>
     c00:	ac 01       	movw	r20, r24
     c02:	2b 81       	ldd	r18, Y+3	; 0x03
     c04:	3c 81       	ldd	r19, Y+4	; 0x04
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	9a 81       	ldd	r25, Y+2	; 0x02
     c0a:	b9 01       	movw	r22, r18
     c0c:	f8 01       	movw	r30, r16
     c0e:	09 95       	icall
    }
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	28 97       	sbiw	r28, 0x08	; 8
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
     c3a:	7e 83       	std	Y+6, r23	; 0x06
     c3c:	6d 83       	std	Y+5, r22	; 0x05
     c3e:	58 87       	std	Y+8, r21	; 0x08
     c40:	4f 83       	std	Y+7, r20	; 0x07
  size_t n = 0;
     c42:	1a 82       	std	Y+2, r1	; 0x02
     c44:	19 82       	std	Y+1, r1	; 0x01
  while (size--) {
     c46:	1c c0       	rjmp	.+56     	; 0xc80 <_ZN5Print5writeEPKhj+0x5e>
    n += write(*buffer++);
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	9c 81       	ldd	r25, Y+4	; 0x04
     c4c:	fc 01       	movw	r30, r24
     c4e:	80 81       	ld	r24, Z
     c50:	91 81       	ldd	r25, Z+1	; 0x01
     c52:	fc 01       	movw	r30, r24
     c54:	20 81       	ld	r18, Z
     c56:	31 81       	ldd	r19, Z+1	; 0x01
     c58:	8d 81       	ldd	r24, Y+5	; 0x05
     c5a:	9e 81       	ldd	r25, Y+6	; 0x06
     c5c:	ac 01       	movw	r20, r24
     c5e:	4f 5f       	subi	r20, 0xFF	; 255
     c60:	5f 4f       	sbci	r21, 0xFF	; 255
     c62:	5e 83       	std	Y+6, r21	; 0x06
     c64:	4d 83       	std	Y+5, r20	; 0x05
     c66:	fc 01       	movw	r30, r24
     c68:	40 81       	ld	r20, Z
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	64 2f       	mov	r22, r20
     c70:	f9 01       	movw	r30, r18
     c72:	09 95       	icall
     c74:	29 81       	ldd	r18, Y+1	; 0x01
     c76:	3a 81       	ldd	r19, Y+2	; 0x02
     c78:	82 0f       	add	r24, r18
     c7a:	93 1f       	adc	r25, r19
     c7c:	9a 83       	std	Y+2, r25	; 0x02
     c7e:	89 83       	std	Y+1, r24	; 0x01

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     c80:	8f 81       	ldd	r24, Y+7	; 0x07
     c82:	98 85       	ldd	r25, Y+8	; 0x08
     c84:	9c 01       	movw	r18, r24
     c86:	21 50       	subi	r18, 0x01	; 1
     c88:	31 09       	sbc	r19, r1
     c8a:	38 87       	std	Y+8, r19	; 0x08
     c8c:	2f 83       	std	Y+7, r18	; 0x07
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	09 f4       	brne	.+2      	; 0xc96 <_ZN5Print5writeEPKhj+0x74>
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	22 23       	and	r18, r18
     c98:	b9 f6       	brne	.-82     	; 0xc48 <_ZN5Print5writeEPKhj+0x26>
    n += write(*buffer++);
  }
  return n;
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c9e:	28 96       	adiw	r28, 0x08	; 8
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <_ZN5Print5printEc>:
{
  return write(str);
}

size_t Print::print(char c)
{
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <_ZN5Print5printEc+0x6>
     cb6:	1f 92       	push	r1
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	6b 83       	std	Y+3, r22	; 0x03
  return write(c);
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	91 81       	ldd	r25, Z+1	; 0x01
     ccc:	fc 01       	movw	r30, r24
     cce:	20 81       	ld	r18, Z
     cd0:	31 81       	ldd	r19, Z+1	; 0x01
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	6b 81       	ldd	r22, Y+3	; 0x03
     cd8:	f9 01       	movw	r30, r18
     cda:	09 95       	icall
}
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	00 d0       	rcall	.+0      	; 0xcee <_ZN5Print5printEhi+0x6>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <_ZN5Print5printEhi+0x8>
     cf0:	1f 92       	push	r1
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	6b 83       	std	Y+3, r22	; 0x03
     cfc:	5d 83       	std	Y+5, r21	; 0x05
     cfe:	4c 83       	std	Y+4, r20	; 0x04
  return print((unsigned long) b, base);
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	2c 81       	ldd	r18, Y+4	; 0x04
     d0c:	3d 81       	ldd	r19, Y+5	; 0x05
     d0e:	e9 81       	ldd	r30, Y+1	; 0x01
     d10:	fa 81       	ldd	r31, Y+2	; 0x02
     d12:	ac 01       	movw	r20, r24
     d14:	bd 01       	movw	r22, r26
     d16:	cf 01       	movw	r24, r30
     d18:	08 d0       	rcall	.+16     	; 0xd2a <_ZN5Print5printEmi>
     d1a:	0f 90       	pop	r0
}
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	28 97       	sbiw	r28, 0x08	; 8
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	9a 83       	std	Y+2, r25	; 0x02
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	4b 83       	std	Y+3, r20	; 0x03
     d44:	5c 83       	std	Y+4, r21	; 0x04
     d46:	6d 83       	std	Y+5, r22	; 0x05
     d48:	7e 83       	std	Y+6, r23	; 0x06
     d4a:	38 87       	std	Y+8, r19	; 0x08
     d4c:	2f 83       	std	Y+7, r18	; 0x07
  if (base == 0) return write(n);
     d4e:	8f 81       	ldd	r24, Y+7	; 0x07
     d50:	98 85       	ldd	r25, Y+8	; 0x08
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	79 f4       	brne	.+30     	; 0xd74 <_ZN5Print5printEmi+0x4a>
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	fc 01       	movw	r30, r24
     d5c:	80 81       	ld	r24, Z
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	fc 01       	movw	r30, r24
     d62:	20 81       	ld	r18, Z
     d64:	31 81       	ldd	r19, Z+1	; 0x01
     d66:	4b 81       	ldd	r20, Y+3	; 0x03
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	9a 81       	ldd	r25, Y+2	; 0x02
     d6c:	64 2f       	mov	r22, r20
     d6e:	f9 01       	movw	r30, r18
     d70:	09 95       	icall
     d72:	0b c0       	rjmp	.+22     	; 0xd8a <_ZN5Print5printEmi+0x60>
  else return printNumber(n, base);
     d74:	2f 81       	ldd	r18, Y+7	; 0x07
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	9c 81       	ldd	r25, Y+4	; 0x04
     d7a:	ad 81       	ldd	r26, Y+5	; 0x05
     d7c:	be 81       	ldd	r27, Y+6	; 0x06
     d7e:	e9 81       	ldd	r30, Y+1	; 0x01
     d80:	fa 81       	ldd	r31, Y+2	; 0x02
     d82:	ac 01       	movw	r20, r24
     d84:	bd 01       	movw	r22, r26
     d86:	cf 01       	movw	r24, r30
     d88:	09 d0       	rcall	.+18     	; 0xd9c <_ZN5Print11printNumberEmh>
     d8a:	28 96       	adiw	r28, 0x08	; 8
}
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	e3 97       	sbiw	r28, 0x33	; 51
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	9a a7       	std	Y+42, r25	; 0x2a
     db2:	89 a7       	std	Y+41, r24	; 0x29
     db4:	4b a7       	std	Y+43, r20	; 0x2b
     db6:	5c a7       	std	Y+44, r21	; 0x2c
     db8:	6d a7       	std	Y+45, r22	; 0x2d
     dba:	7e a7       	std	Y+46, r23	; 0x2e
     dbc:	2f a7       	std	Y+47, r18	; 0x2f
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
     dbe:	80 e2       	ldi	r24, 0x20	; 32
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	9e 01       	movw	r18, r28
     dc4:	28 5f       	subi	r18, 0xF8	; 248
     dc6:	3f 4f       	sbci	r19, 0xFF	; 255
     dc8:	82 0f       	add	r24, r18
     dca:	93 1f       	adc	r25, r19
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01

  *str = '\0';
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	fc 01       	movw	r30, r24
     dd6:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     dd8:	8f a5       	ldd	r24, Y+47	; 0x2f
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	10 f4       	brcc	.+4      	; 0xde2 <_ZN5Print11printNumberEmh+0x46>
     dde:	8a e0       	ldi	r24, 0x0A	; 10
     de0:	8f a7       	std	Y+47, r24	; 0x2f

  do {
    unsigned long m = n;
     de2:	8b a5       	ldd	r24, Y+43	; 0x2b
     de4:	9c a5       	ldd	r25, Y+44	; 0x2c
     de6:	ad a5       	ldd	r26, Y+45	; 0x2d
     de8:	be a5       	ldd	r27, Y+46	; 0x2e
     dea:	8b 83       	std	Y+3, r24	; 0x03
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	ad 83       	std	Y+5, r26	; 0x05
     df0:	be 83       	std	Y+6, r27	; 0x06
    n /= base;
     df2:	8f a5       	ldd	r24, Y+47	; 0x2f
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e0       	ldi	r20, 0x00	; 0
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	8b a5       	ldd	r24, Y+43	; 0x2b
     dfe:	9c a5       	ldd	r25, Y+44	; 0x2c
     e00:	ad a5       	ldd	r26, Y+45	; 0x2d
     e02:	be a5       	ldd	r27, Y+46	; 0x2e
     e04:	bc 01       	movw	r22, r24
     e06:	cd 01       	movw	r24, r26
     e08:	0e 94 3e 10 	call	0x207c	; 0x207c <__udivmodsi4>
     e0c:	da 01       	movw	r26, r20
     e0e:	c9 01       	movw	r24, r18
     e10:	8b a7       	std	Y+43, r24	; 0x2b
     e12:	9c a7       	std	Y+44, r25	; 0x2c
     e14:	ad a7       	std	Y+45, r26	; 0x2d
     e16:	be a7       	std	Y+46, r27	; 0x2e
    char c = m - base * n;
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	2b a5       	ldd	r18, Y+43	; 0x2b
     e1c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e1e:	28 9f       	mul	r18, r24
     e20:	80 2d       	mov	r24, r0
     e22:	11 24       	eor	r1, r1
     e24:	f9 2f       	mov	r31, r25
     e26:	f8 1b       	sub	r31, r24
     e28:	8f 2f       	mov	r24, r31
     e2a:	8f 83       	std	Y+7, r24	; 0x07
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	9a 83       	std	Y+2, r25	; 0x02
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	8f 81       	ldd	r24, Y+7	; 0x07
     e38:	8a 30       	cpi	r24, 0x0A	; 10
     e3a:	20 f4       	brcc	.+8      	; 0xe44 <_ZN5Print11printNumberEmh+0xa8>
     e3c:	8f 81       	ldd	r24, Y+7	; 0x07
     e3e:	20 e3       	ldi	r18, 0x30	; 48
     e40:	28 0f       	add	r18, r24
     e42:	03 c0       	rjmp	.+6      	; 0xe4a <_ZN5Print11printNumberEmh+0xae>
     e44:	8f 81       	ldd	r24, Y+7	; 0x07
     e46:	27 e3       	ldi	r18, 0x37	; 55
     e48:	28 0f       	add	r18, r24
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     e52:	8b a5       	ldd	r24, Y+43	; 0x2b
     e54:	9c a5       	ldd	r25, Y+44	; 0x2c
     e56:	ad a5       	ldd	r26, Y+45	; 0x2d
     e58:	be a5       	ldd	r27, Y+46	; 0x2e
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	a1 05       	cpc	r26, r1
     e5e:	b1 05       	cpc	r27, r1
     e60:	09 f0       	breq	.+2      	; 0xe64 <_ZN5Print11printNumberEmh+0xc8>
     e62:	bf cf       	rjmp	.-130    	; 0xde2 <_ZN5Print11printNumberEmh+0x46>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     e64:	29 81       	ldd	r18, Y+1	; 0x01
     e66:	3a 81       	ldd	r19, Y+2	; 0x02
     e68:	89 a5       	ldd	r24, Y+41	; 0x29
     e6a:	9a a5       	ldd	r25, Y+42	; 0x2a
     e6c:	b9 01       	movw	r22, r18
     e6e:	a8 de       	rcall	.-688    	; 0xbc0 <_ZN5Print5writeEPKc>
     e70:	e3 96       	adiw	r28, 0x33	; 51
}
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <_Z12disableTimerh>:

// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	1f 92       	push	r1
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	89 83       	std	Y+1, r24	; 0x01
  switch (_timer)
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	91 05       	cpc	r25, r1
     e98:	51 f0       	breq	.+20     	; 0xeae <_Z12disableTimerh+0x2c>
     e9a:	82 30       	cpi	r24, 0x02	; 2
     e9c:	91 05       	cpc	r25, r1
     e9e:	89 f0       	breq	.+34     	; 0xec2 <_Z12disableTimerh+0x40>
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	61 f5       	brne	.+88     	; 0xefc <_Z12disableTimerh+0x7a>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     ea4:	8e e6       	ldi	r24, 0x6E	; 110
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	fc 01       	movw	r30, r24
     eaa:	10 82       	st	Z, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     eac:	27 c0       	rjmp	.+78     	; 0xefc <_Z12disableTimerh+0x7a>

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     eae:	8f e6       	ldi	r24, 0x6F	; 111
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	2f e6       	ldi	r18, 0x6F	; 111
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	f9 01       	movw	r30, r18
     eb8:	20 81       	ld	r18, Z
     eba:	2d 7f       	andi	r18, 0xFD	; 253
     ebc:	fc 01       	movw	r30, r24
     ebe:	20 83       	st	Z, r18
      break;
     ec0:	1d c0       	rjmp	.+58     	; 0xefc <_Z12disableTimerh+0x7a>
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     ec2:	80 e7       	ldi	r24, 0x70	; 112
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	20 e7       	ldi	r18, 0x70	; 112
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	f9 01       	movw	r30, r18
     ecc:	20 81       	ld	r18, Z
     ece:	2d 7f       	andi	r18, 0xFD	; 253
     ed0:	fc 01       	movw	r30, r24
     ed2:	20 83       	st	Z, r18
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     ed4:	80 eb       	ldi	r24, 0xB0	; 176
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	21 e0       	ldi	r18, 0x01	; 1
     eda:	fc 01       	movw	r30, r24
     edc:	20 83       	st	Z, r18
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     ede:	81 eb       	ldi	r24, 0xB1	; 177
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	21 eb       	ldi	r18, 0xB1	; 177
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	f9 01       	movw	r30, r18
     ee8:	20 81       	ld	r18, Z
     eea:	28 7f       	andi	r18, 0xF8	; 248
     eec:	24 60       	ori	r18, 0x04	; 4
     eee:	fc 01       	movw	r30, r24
     ef0:	20 83       	st	Z, r18
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     ef2:	83 eb       	ldi	r24, 0xB3	; 179
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	fc 01       	movw	r30, r24
     ef8:	10 82       	st	Z, r1
      #endif
      break;
     efa:	00 00       	nop
    case 5:
      TIMSK5 = 0;
      break;
#endif
  }
}
     efc:	0f 90       	pop	r0
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <_Z6noToneh>:


void noTone(uint8_t _pin)
{
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	27 97       	sbiw	r28, 0x07	; 7
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8f 83       	std	Y+7, r24	; 0x07
  int8_t _timer = -1;
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	89 83       	std	Y+1, r24	; 0x01
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
     f1e:	1b 82       	std	Y+3, r1	; 0x03
     f20:	1a 82       	std	Y+2, r1	; 0x02
     f22:	22 c0       	rjmp	.+68     	; 0xf68 <_Z6noToneh+0x64>
    if (tone_pins[i] == _pin) {
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	9b 81       	ldd	r25, Y+3	; 0x03
     f28:	86 5f       	subi	r24, 0xF6	; 246
     f2a:	9e 4f       	sbci	r25, 0xFE	; 254
     f2c:	fc 01       	movw	r30, r24
     f2e:	90 81       	ld	r25, Z
     f30:	8f 81       	ldd	r24, Y+7	; 0x07
     f32:	98 17       	cp	r25, r24
     f34:	a1 f4       	brne	.+40     	; 0xf5e <_Z6noToneh+0x5a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	9b 81       	ldd	r25, Y+3	; 0x03
     f3a:	82 58       	subi	r24, 0x82	; 130
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	9d 83       	std	Y+5, r25	; 0x05
     f40:	8c 83       	std	Y+4, r24	; 0x04
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	fc 01       	movw	r30, r24
     f48:	84 91       	lpm	r24, Z
     f4a:	8e 83       	std	Y+6, r24	; 0x06
     f4c:	8e 81       	ldd	r24, Y+6	; 0x06
     f4e:	89 83       	std	Y+1, r24	; 0x01
      tone_pins[i] = 255;
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	9b 81       	ldd	r25, Y+3	; 0x03
     f54:	86 5f       	subi	r24, 0xF6	; 246
     f56:	9e 4f       	sbci	r25, 0xFE	; 254
     f58:	2f ef       	ldi	r18, 0xFF	; 255
     f5a:	fc 01       	movw	r30, r24
     f5c:	20 83       	st	Z, r18

void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	9b 83       	std	Y+3, r25	; 0x03
     f66:	8a 83       	std	Y+2, r24	; 0x02
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	18 16       	cp	r1, r24
     f6e:	19 06       	cpc	r1, r25
     f70:	cc f6       	brge	.-78     	; 0xf24 <_Z6noToneh+0x20>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	86 df       	rcall	.-244    	; 0xe82 <_Z12disableTimerh>
     f76:	60 e0       	ldi	r22, 0x00	; 0

  digitalWrite(_pin, 0);
     f78:	8f 81       	ldd	r24, Y+7	; 0x07
     f7a:	58 d2       	rcall	.+1200   	; 0x142c <digitalWrite>
     f7c:	27 96       	adiw	r28, 0x07	; 7
     f7e:	0f b6       	in	r0, 0x3f	; 63
}
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	00 90 5f 00 	lds	r0, 0x005F
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	2f 93       	push	r18
     f9c:	3f 93       	push	r19
     f9e:	4f 93       	push	r20
     fa0:	5f 93       	push	r21
     fa2:	6f 93       	push	r22
     fa4:	7f 93       	push	r23
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
     faa:	af 93       	push	r26
     fac:	bf 93       	push	r27
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62

  if (timer2_toggle_count != 0)
     fba:	80 91 e3 02 	lds	r24, 0x02E3
     fbe:	90 91 e4 02 	lds	r25, 0x02E4
     fc2:	a0 91 e5 02 	lds	r26, 0x02E5
     fc6:	b0 91 e6 02 	lds	r27, 0x02E6
     fca:	21 e0       	ldi	r18, 0x01	; 1
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	a1 05       	cpc	r26, r1
     fd0:	b1 05       	cpc	r27, r1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <__vector_7+0x48>
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	22 23       	and	r18, r18
     fd8:	a1 f1       	breq	.+104    	; 0x1042 <__vector_7+0xb4>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     fda:	40 91 e9 02 	lds	r20, 0x02E9
     fde:	80 91 e7 02 	lds	r24, 0x02E7
     fe2:	90 91 e8 02 	lds	r25, 0x02E8
     fe6:	20 91 e7 02 	lds	r18, 0x02E7
     fea:	30 91 e8 02 	lds	r19, 0x02E8
     fee:	f9 01       	movw	r30, r18
     ff0:	20 81       	ld	r18, Z
     ff2:	24 27       	eor	r18, r20
     ff4:	fc 01       	movw	r30, r24
     ff6:	20 83       	st	Z, r18

    if (timer2_toggle_count > 0)
     ff8:	80 91 e3 02 	lds	r24, 0x02E3
     ffc:	90 91 e4 02 	lds	r25, 0x02E4
    1000:	a0 91 e5 02 	lds	r26, 0x02E5
    1004:	b0 91 e6 02 	lds	r27, 0x02E6
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	18 16       	cp	r1, r24
    100c:	19 06       	cpc	r1, r25
    100e:	1a 06       	cpc	r1, r26
    1010:	1b 06       	cpc	r1, r27
    1012:	0c f0       	brlt	.+2      	; 0x1016 <__vector_7+0x88>
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	22 23       	and	r18, r18
    1018:	b9 f0       	breq	.+46     	; 0x1048 <__vector_7+0xba>
      timer2_toggle_count--;
    101a:	80 91 e3 02 	lds	r24, 0x02E3
    101e:	90 91 e4 02 	lds	r25, 0x02E4
    1022:	a0 91 e5 02 	lds	r26, 0x02E5
    1026:	b0 91 e6 02 	lds	r27, 0x02E6
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	a1 09       	sbc	r26, r1
    102e:	b1 09       	sbc	r27, r1
    1030:	80 93 e3 02 	sts	0x02E3, r24
    1034:	90 93 e4 02 	sts	0x02E4, r25
    1038:	a0 93 e5 02 	sts	0x02E5, r26
    103c:	b0 93 e6 02 	sts	0x02E6, r27
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <__vector_7+0xba>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    1042:	80 91 0a 01 	lds	r24, 0x010A
    1046:	5e df       	rcall	.-324    	; 0xf04 <_Z6noToneh>
    1048:	df 91       	pop	r29
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    104a:	cf 91       	pop	r28
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	bf 91       	pop	r27
    1052:	af 91       	pop	r26
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	7f 91       	pop	r23
    105a:	6f 91       	pop	r22
    105c:	5f 91       	pop	r21
    105e:	4f 91       	pop	r20
    1060:	3f 91       	pop	r19
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	00 92 5f 00 	sts	0x005F, r0
    106a:	0f 90       	pop	r0
    106c:	1f 90       	pop	r1
    106e:	18 95       	reti

00001070 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
    1070:	1f 92       	push	r1
    1072:	0f 92       	push	r0
    1074:	00 90 5f 00 	lds	r0, 0x005F
    1078:	0f 92       	push	r0
    107a:	11 24       	eor	r1, r1
    107c:	2f 93       	push	r18
    107e:	3f 93       	push	r19
    1080:	4f 93       	push	r20
    1082:	5f 93       	push	r21
    1084:	6f 93       	push	r22
    1086:	7f 93       	push	r23
    1088:	8f 93       	push	r24
    108a:	9f 93       	push	r25
    108c:	af 93       	push	r26
    108e:	bf 93       	push	r27
    1090:	ef 93       	push	r30
    1092:	ff 93       	push	r31
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_0])
    109c:	80 91 ea 02 	lds	r24, 0x02EA
    10a0:	90 91 eb 02 	lds	r25, 0x02EB
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	31 f0       	breq	.+12     	; 0x10b4 <__vector_1+0x44>
    intFunc[EXTERNAL_INT_0]();
    10a8:	80 91 ea 02 	lds	r24, 0x02EA
    10ac:	90 91 eb 02 	lds	r25, 0x02EB
    10b0:	fc 01       	movw	r30, r24
    10b2:	09 95       	icall
}
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	ff 91       	pop	r31
    10ba:	ef 91       	pop	r30
    10bc:	bf 91       	pop	r27
    10be:	af 91       	pop	r26
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	7f 91       	pop	r23
    10c6:	6f 91       	pop	r22
    10c8:	5f 91       	pop	r21
    10ca:	4f 91       	pop	r20
    10cc:	3f 91       	pop	r19
    10ce:	2f 91       	pop	r18
    10d0:	0f 90       	pop	r0
    10d2:	00 92 5f 00 	sts	0x005F, r0
    10d6:	0f 90       	pop	r0
    10d8:	1f 90       	pop	r1
    10da:	18 95       	reti

000010dc <__vector_2>:

ISR(INT1_vect) {
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	00 90 5f 00 	lds	r0, 0x005F
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	ef 93       	push	r30
    10fe:	ff 93       	push	r31
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_1])
    1108:	80 91 ec 02 	lds	r24, 0x02EC
    110c:	90 91 ed 02 	lds	r25, 0x02ED
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	31 f0       	breq	.+12     	; 0x1120 <__vector_2+0x44>
    intFunc[EXTERNAL_INT_1]();
    1114:	80 91 ec 02 	lds	r24, 0x02EC
    1118:	90 91 ed 02 	lds	r25, 0x02ED
    111c:	fc 01       	movw	r30, r24
    111e:	09 95       	icall
}
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	ff 91       	pop	r31
    1126:	ef 91       	pop	r30
    1128:	bf 91       	pop	r27
    112a:	af 91       	pop	r26
    112c:	9f 91       	pop	r25
    112e:	8f 91       	pop	r24
    1130:	7f 91       	pop	r23
    1132:	6f 91       	pop	r22
    1134:	5f 91       	pop	r21
    1136:	4f 91       	pop	r20
    1138:	3f 91       	pop	r19
    113a:	2f 91       	pop	r18
    113c:	0f 90       	pop	r0
    113e:	00 92 5f 00 	sts	0x005F, r0
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__cxa_pure_virtual>:
#include <stdlib.h>

extern "C" void __cxa_pure_virtual(void) __attribute__ ((__noreturn__));
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
    1150:	bd d7       	rcall	.+3962   	; 0x20cc <abort>

00001152 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	08 95       	ret

00001160 <main>:

int main(void)
{
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
	init();
    1168:	7c d0       	rcall	.+248    	; 0x1262 <init>
    116a:	f3 df       	rcall	.-26     	; 0x1152 <initVariant>

	initVariant();
    116c:	e7 d6       	rcall	.+3534   	; 0x1f3c <setup>
    116e:	32 d7       	rcall	.+3684   	; 0x1fd4 <loop>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1170:	8e e8       	ldi	r24, 0x8E	; 142
    1172:	90 e0       	ldi	r25, 0x00	; 0
    
	for (;;) {
		loop();
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	11 f0       	breq	.+4      	; 0x117c <main+0x1c>
		if (serialEventRun) serialEventRun();
    1178:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z14serialEventRunv>
    117c:	f8 cf       	rjmp	.-16     	; 0x116e <main+0xe>

0000117e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	00 90 5f 00 	lds	r0, 0x005F
    1186:	0f 92       	push	r0
    1188:	11 24       	eor	r1, r1
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
    118e:	af 93       	push	r26
    1190:	bf 93       	push	r27
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	25 97       	sbiw	r28, 0x05	; 5
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	cd bf       	out	0x3d, r28	; 61
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    11a0:	80 91 f2 02 	lds	r24, 0x02F2
    11a4:	90 91 f3 02 	lds	r25, 0x02F3
    11a8:	a0 91 f4 02 	lds	r26, 0x02F4
    11ac:	b0 91 f5 02 	lds	r27, 0x02F5
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	9a 83       	std	Y+2, r25	; 0x02
    11b4:	ab 83       	std	Y+3, r26	; 0x03
    11b6:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char f = timer0_fract;
    11b8:	80 91 f6 02 	lds	r24, 0x02F6
    11bc:	8d 83       	std	Y+5, r24	; 0x05

	m += MILLIS_INC;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	ab 81       	ldd	r26, Y+3	; 0x03
    11c4:	bc 81       	ldd	r27, Y+4	; 0x04
    11c6:	40 96       	adiw	r24, 0x10	; 16
    11c8:	a1 1d       	adc	r26, r1
    11ca:	b1 1d       	adc	r27, r1
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	ab 83       	std	Y+3, r26	; 0x03
    11d2:	bc 83       	std	Y+4, r27	; 0x04
	f += FRACT_INC;
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	80 5d       	subi	r24, 0xD0	; 208
    11d8:	8d 83       	std	Y+5, r24	; 0x05
	if (f >= FRACT_MAX) {
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	8d 37       	cpi	r24, 0x7D	; 125
    11de:	70 f0       	brcs	.+28     	; 0x11fc <__vector_16+0x7e>
		f -= FRACT_MAX;
    11e0:	8d 81       	ldd	r24, Y+5	; 0x05
    11e2:	8d 57       	subi	r24, 0x7D	; 125
    11e4:	8d 83       	std	Y+5, r24	; 0x05
		m += 1;
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	ab 81       	ldd	r26, Y+3	; 0x03
    11ec:	bc 81       	ldd	r27, Y+4	; 0x04
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	a1 1d       	adc	r26, r1
    11f2:	b1 1d       	adc	r27, r1
    11f4:	89 83       	std	Y+1, r24	; 0x01
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	ab 83       	std	Y+3, r26	; 0x03
    11fa:	bc 83       	std	Y+4, r27	; 0x04
	}

	timer0_fract = f;
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	80 93 f6 02 	sts	0x02F6, r24
	timer0_millis = m;
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	ab 81       	ldd	r26, Y+3	; 0x03
    1208:	bc 81       	ldd	r27, Y+4	; 0x04
    120a:	80 93 f2 02 	sts	0x02F2, r24
    120e:	90 93 f3 02 	sts	0x02F3, r25
    1212:	a0 93 f4 02 	sts	0x02F4, r26
    1216:	b0 93 f5 02 	sts	0x02F5, r27
	timer0_overflow_count++;
    121a:	80 91 ee 02 	lds	r24, 0x02EE
    121e:	90 91 ef 02 	lds	r25, 0x02EF
    1222:	a0 91 f0 02 	lds	r26, 0x02F0
    1226:	b0 91 f1 02 	lds	r27, 0x02F1
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	a1 1d       	adc	r26, r1
    122e:	b1 1d       	adc	r27, r1
    1230:	80 93 ee 02 	sts	0x02EE, r24
    1234:	90 93 ef 02 	sts	0x02EF, r25
    1238:	a0 93 f0 02 	sts	0x02F0, r26
    123c:	b0 93 f1 02 	sts	0x02F1, r27
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	bf 91       	pop	r27
    1250:	af 91       	pop	r26
    1252:	9f 91       	pop	r25
    1254:	8f 91       	pop	r24
    1256:	0f 90       	pop	r0
    1258:	00 92 5f 00 	sts	0x005F, r0
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <init>:
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
}

void init()
{
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    126a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    126c:	84 e4       	ldi	r24, 0x44	; 68
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	24 e4       	ldi	r18, 0x44	; 68
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	f9 01       	movw	r30, r18
    1276:	20 81       	ld	r18, Z
    1278:	22 60       	ori	r18, 0x02	; 2
    127a:	fc 01       	movw	r30, r24
    127c:	20 83       	st	Z, r18
	sbi(TCCR0A, WGM00);
    127e:	84 e4       	ldi	r24, 0x44	; 68
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	24 e4       	ldi	r18, 0x44	; 68
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	f9 01       	movw	r30, r18
    1288:	20 81       	ld	r18, Z
    128a:	21 60       	ori	r18, 0x01	; 1
    128c:	fc 01       	movw	r30, r24
    128e:	20 83       	st	Z, r18
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1290:	85 e4       	ldi	r24, 0x45	; 69
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	25 e4       	ldi	r18, 0x45	; 69
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	f9 01       	movw	r30, r18
    129a:	20 81       	ld	r18, Z
    129c:	22 60       	ori	r18, 0x02	; 2
    129e:	fc 01       	movw	r30, r24
    12a0:	20 83       	st	Z, r18
	sbi(TCCR0B, CS00);
    12a2:	85 e4       	ldi	r24, 0x45	; 69
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	25 e4       	ldi	r18, 0x45	; 69
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	f9 01       	movw	r30, r18
    12ac:	20 81       	ld	r18, Z
    12ae:	21 60       	ori	r18, 0x01	; 1
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 83       	st	Z, r18

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    12b4:	8e e6       	ldi	r24, 0x6E	; 110
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	2e e6       	ldi	r18, 0x6E	; 110
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	f9 01       	movw	r30, r18
    12be:	20 81       	ld	r18, Z
    12c0:	21 60       	ori	r18, 0x01	; 1
    12c2:	fc 01       	movw	r30, r24
    12c4:	20 83       	st	Z, r18
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    12c6:	81 e8       	ldi	r24, 0x81	; 129
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	fc 01       	movw	r30, r24
    12cc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    12ce:	81 e8       	ldi	r24, 0x81	; 129
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	21 e8       	ldi	r18, 0x81	; 129
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	f9 01       	movw	r30, r18
    12d8:	20 81       	ld	r18, Z
    12da:	22 60       	ori	r18, 0x02	; 2
    12dc:	fc 01       	movw	r30, r24
    12de:	20 83       	st	Z, r18
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    12e0:	80 e8       	ldi	r24, 0x80	; 128
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	20 e8       	ldi	r18, 0x80	; 128
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	f9 01       	movw	r30, r18
    12ea:	20 81       	ld	r18, Z
    12ec:	21 60       	ori	r18, 0x01	; 1
    12ee:	fc 01       	movw	r30, r24
    12f0:	20 83       	st	Z, r18

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    12f2:	81 eb       	ldi	r24, 0xB1	; 177
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	21 eb       	ldi	r18, 0xB1	; 177
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	f9 01       	movw	r30, r18
    12fc:	20 81       	ld	r18, Z
    12fe:	24 60       	ori	r18, 0x04	; 4
    1300:	fc 01       	movw	r30, r24
    1302:	20 83       	st	Z, r18

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1304:	80 eb       	ldi	r24, 0xB0	; 176
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	20 eb       	ldi	r18, 0xB0	; 176
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	f9 01       	movw	r30, r18
    130e:	20 81       	ld	r18, Z
    1310:	21 60       	ori	r18, 0x01	; 1
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1316:	8a e7       	ldi	r24, 0x7A	; 122
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	2a e7       	ldi	r18, 0x7A	; 122
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	f9 01       	movw	r30, r18
    1320:	20 81       	ld	r18, Z
    1322:	24 60       	ori	r18, 0x04	; 4
    1324:	fc 01       	movw	r30, r24
    1326:	20 83       	st	Z, r18
	sbi(ADCSRA, ADPS1);
    1328:	8a e7       	ldi	r24, 0x7A	; 122
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	2a e7       	ldi	r18, 0x7A	; 122
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	f9 01       	movw	r30, r18
    1332:	20 81       	ld	r18, Z
    1334:	22 60       	ori	r18, 0x02	; 2
    1336:	fc 01       	movw	r30, r24
    1338:	20 83       	st	Z, r18
	sbi(ADCSRA, ADPS0);
    133a:	8a e7       	ldi	r24, 0x7A	; 122
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	2a e7       	ldi	r18, 0x7A	; 122
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	f9 01       	movw	r30, r18
    1344:	20 81       	ld	r18, Z
    1346:	21 60       	ori	r18, 0x01	; 1
    1348:	fc 01       	movw	r30, r24
    134a:	20 83       	st	Z, r18

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    134c:	8a e7       	ldi	r24, 0x7A	; 122
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	2a e7       	ldi	r18, 0x7A	; 122
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	f9 01       	movw	r30, r18
    1356:	20 81       	ld	r18, Z
    1358:	20 68       	ori	r18, 0x80	; 128
    135a:	fc 01       	movw	r30, r24
    135c:	20 83       	st	Z, r18
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    135e:	81 ec       	ldi	r24, 0xC1	; 193
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	fc 01       	movw	r30, r24
    1364:	10 82       	st	Z, r1
#endif
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <turnOffPWM>:
// - Added more #ifdefs, now compiles for atmega645
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	1f 92       	push	r1
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	89 83       	std	Y+1, r24	; 0x01
	switch (timer)
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	83 30       	cpi	r24, 0x03	; 3
    1380:	91 05       	cpc	r25, r1
    1382:	a1 f0       	breq	.+40     	; 0x13ac <turnOffPWM+0x40>
    1384:	84 30       	cpi	r24, 0x04	; 4
    1386:	91 05       	cpc	r25, r1
    1388:	3c f4       	brge	.+14     	; 0x1398 <turnOffPWM+0x2c>
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	91 05       	cpc	r25, r1
    138e:	11 f1       	breq	.+68     	; 0x13d4 <turnOffPWM+0x68>
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	91 05       	cpc	r25, r1
    1394:	49 f1       	breq	.+82     	; 0x13e8 <turnOffPWM+0x7c>
    1396:	46 c0       	rjmp	.+140    	; 0x1424 <turnOffPWM+0xb8>
    1398:	87 30       	cpi	r24, 0x07	; 7
    139a:	91 05       	cpc	r25, r1
    139c:	79 f1       	breq	.+94     	; 0x13fc <turnOffPWM+0x90>
    139e:	88 30       	cpi	r24, 0x08	; 8
    13a0:	91 05       	cpc	r25, r1
    13a2:	b1 f1       	breq	.+108    	; 0x1410 <turnOffPWM+0xa4>
    13a4:	84 30       	cpi	r24, 0x04	; 4
    13a6:	91 05       	cpc	r25, r1
    13a8:	59 f0       	breq	.+22     	; 0x13c0 <turnOffPWM+0x54>
    13aa:	3c c0       	rjmp	.+120    	; 0x1424 <turnOffPWM+0xb8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    13ac:	80 e8       	ldi	r24, 0x80	; 128
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	20 e8       	ldi	r18, 0x80	; 128
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	f9 01       	movw	r30, r18
    13b6:	20 81       	ld	r18, Z
    13b8:	2f 77       	andi	r18, 0x7F	; 127
    13ba:	fc 01       	movw	r30, r24
    13bc:	20 83       	st	Z, r18
    13be:	32 c0       	rjmp	.+100    	; 0x1424 <turnOffPWM+0xb8>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    13c0:	80 e8       	ldi	r24, 0x80	; 128
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	20 e8       	ldi	r18, 0x80	; 128
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	f9 01       	movw	r30, r18
    13ca:	20 81       	ld	r18, Z
    13cc:	2f 7d       	andi	r18, 0xDF	; 223
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 83       	st	Z, r18
    13d2:	28 c0       	rjmp	.+80     	; 0x1424 <turnOffPWM+0xb8>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    13d4:	84 e4       	ldi	r24, 0x44	; 68
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	24 e4       	ldi	r18, 0x44	; 68
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	2f 77       	andi	r18, 0x7F	; 127
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
    13e6:	1e c0       	rjmp	.+60     	; 0x1424 <turnOffPWM+0xb8>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    13e8:	84 e4       	ldi	r24, 0x44	; 68
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	24 e4       	ldi	r18, 0x44	; 68
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	f9 01       	movw	r30, r18
    13f2:	20 81       	ld	r18, Z
    13f4:	2f 7d       	andi	r18, 0xDF	; 223
    13f6:	fc 01       	movw	r30, r24
    13f8:	20 83       	st	Z, r18
    13fa:	14 c0       	rjmp	.+40     	; 0x1424 <turnOffPWM+0xb8>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    13fc:	80 eb       	ldi	r24, 0xB0	; 176
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	20 eb       	ldi	r18, 0xB0	; 176
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	f9 01       	movw	r30, r18
    1406:	20 81       	ld	r18, Z
    1408:	2f 77       	andi	r18, 0x7F	; 127
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18
    140e:	0a c0       	rjmp	.+20     	; 0x1424 <turnOffPWM+0xb8>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1410:	80 eb       	ldi	r24, 0xB0	; 176
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	20 eb       	ldi	r18, 0xB0	; 176
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	f9 01       	movw	r30, r18
    141a:	20 81       	ld	r18, Z
    141c:	2f 7d       	andi	r18, 0xDF	; 223
    141e:	fc 01       	movw	r30, r24
    1420:	20 83       	st	Z, r18
    1422:	00 00       	nop
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
    1424:	0f 90       	pop	r0
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	65 97       	sbiw	r28, 0x15	; 21
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	8c 8b       	std	Y+20, r24	; 0x14
    1442:	6d 8b       	std	Y+21, r22	; 0x15
	uint8_t timer = digitalPinToTimer(pin);
    1444:	8c 89       	ldd	r24, Y+20	; 0x14
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	8f 54       	subi	r24, 0x4F	; 79
    144c:	9f 4f       	sbci	r25, 0xFF	; 255
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	fc 01       	movw	r30, r24
    1458:	84 91       	lpm	r24, Z
    145a:	8b 83       	std	Y+3, r24	; 0x03
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t bit = digitalPinToBitMask(pin);
    1460:	8c 89       	ldd	r24, Y+20	; 0x14
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	83 56       	subi	r24, 0x63	; 99
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	fc 01       	movw	r30, r24
    1474:	84 91       	lpm	r24, Z
    1476:	8f 83       	std	Y+7, r24	; 0x07
    1478:	8f 81       	ldd	r24, Y+7	; 0x07
    147a:	88 87       	std	Y+8, r24	; 0x08
	uint8_t port = digitalPinToPort(pin);
    147c:	8c 89       	ldd	r24, Y+20	; 0x14
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	87 57       	subi	r24, 0x77	; 119
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	9a 87       	std	Y+10, r25	; 0x0a
    1488:	89 87       	std	Y+9, r24	; 0x09
    148a:	89 85       	ldd	r24, Y+9	; 0x09
    148c:	9a 85       	ldd	r25, Y+10	; 0x0a
    148e:	fc 01       	movw	r30, r24
    1490:	84 91       	lpm	r24, Z
    1492:	8b 87       	std	Y+11, r24	; 0x0b
    1494:	8b 85       	ldd	r24, Y+11	; 0x0b
    1496:	8c 87       	std	Y+12, r24	; 0x0c
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1498:	8c 85       	ldd	r24, Y+12	; 0x0c
    149a:	88 23       	and	r24, r24
    149c:	09 f4       	brne	.+2      	; 0x14a0 <digitalWrite+0x74>
    149e:	43 c0       	rjmp	.+134    	; 0x1526 <digitalWrite+0xfa>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	88 23       	and	r24, r24
    14a4:	11 f0       	breq	.+4      	; 0x14aa <digitalWrite+0x7e>
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	61 df       	rcall	.-318    	; 0x136c <turnOffPWM>
    14aa:	8c 85       	ldd	r24, Y+12	; 0x0c

	out = portOutputRegister(port);
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	81 58       	subi	r24, 0x81	; 129
    14b6:	9f 4f       	sbci	r25, 0xFF	; 255
    14b8:	9e 87       	std	Y+14, r25	; 0x0e
    14ba:	8d 87       	std	Y+13, r24	; 0x0d
    14bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    14be:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c0:	fc 01       	movw	r30, r24
    14c2:	25 91       	lpm	r18, Z+
    14c4:	34 91       	lpm	r19, Z
    14c6:	cf 01       	movw	r24, r30
    14c8:	38 8b       	std	Y+16, r19	; 0x10
    14ca:	2f 87       	std	Y+15, r18	; 0x0f
    14cc:	9e 87       	std	Y+14, r25	; 0x0e
    14ce:	8d 87       	std	Y+13, r24	; 0x0d
    14d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d2:	98 89       	ldd	r25, Y+16	; 0x10
    14d4:	9a 8b       	std	Y+18, r25	; 0x12
    14d6:	89 8b       	std	Y+17, r24	; 0x11
    14d8:	8f e5       	ldi	r24, 0x5F	; 95

	uint8_t oldSREG = SREG;
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	fc 01       	movw	r30, r24
    14de:	80 81       	ld	r24, Z
    14e0:	8b 8b       	std	Y+19, r24	; 0x13
    14e2:	f8 94       	cli
	cli();
    14e4:	8d 89       	ldd	r24, Y+21	; 0x15

	if (val == LOW) {
    14e6:	88 23       	and	r24, r24
    14e8:	71 f4       	brne	.+28     	; 0x1506 <digitalWrite+0xda>
    14ea:	89 89       	ldd	r24, Y+17	; 0x11
		*out &= ~bit;
    14ec:	9a 89       	ldd	r25, Y+18	; 0x12
    14ee:	fc 01       	movw	r30, r24
    14f0:	80 81       	ld	r24, Z
    14f2:	98 2f       	mov	r25, r24
    14f4:	88 85       	ldd	r24, Y+8	; 0x08
    14f6:	80 95       	com	r24
    14f8:	89 23       	and	r24, r25
    14fa:	28 2f       	mov	r18, r24
    14fc:	89 89       	ldd	r24, Y+17	; 0x11
    14fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1500:	fc 01       	movw	r30, r24
    1502:	20 83       	st	Z, r18
    1504:	0b c0       	rjmp	.+22     	; 0x151c <digitalWrite+0xf0>
    1506:	89 89       	ldd	r24, Y+17	; 0x11
	} else {
		*out |= bit;
    1508:	9a 89       	ldd	r25, Y+18	; 0x12
    150a:	fc 01       	movw	r30, r24
    150c:	90 81       	ld	r25, Z
    150e:	88 85       	ldd	r24, Y+8	; 0x08
    1510:	29 2f       	mov	r18, r25
    1512:	28 2b       	or	r18, r24
    1514:	89 89       	ldd	r24, Y+17	; 0x11
    1516:	9a 89       	ldd	r25, Y+18	; 0x12
    1518:	fc 01       	movw	r30, r24
    151a:	20 83       	st	Z, r18
    151c:	8f e5       	ldi	r24, 0x5F	; 95
	}

	SREG = oldSREG;
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	2b 89       	ldd	r18, Y+19	; 0x13
    1522:	fc 01       	movw	r30, r24
    1524:	20 83       	st	Z, r18
    1526:	65 96       	adiw	r28, 0x15	; 21
}
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <_ZN14HardwareSerial5beginEm>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	00 d0       	rcall	.+0      	; 0x153e <_ZN14HardwareSerial5beginEm+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <_ZN14HardwareSerial5beginEm+0x8>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <_ZN14HardwareSerial5beginEm+0xa>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	4b 83       	std	Y+3, r20	; 0x03
    154c:	5c 83       	std	Y+4, r21	; 0x04
    154e:	6d 83       	std	Y+5, r22	; 0x05
    1550:	7e 83       	std	Y+6, r23	; 0x06
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	ad 81       	ldd	r26, Y+5	; 0x05
    1558:	be 81       	ldd	r27, Y+6	; 0x06
    155a:	e9 81       	ldd	r30, Y+1	; 0x01
    155c:	fa 81       	ldd	r31, Y+2	; 0x02
    155e:	26 e0       	ldi	r18, 0x06	; 6
    1560:	ac 01       	movw	r20, r24
    1562:	bd 01       	movw	r22, r26
    1564:	cf 01       	movw	r24, r30
    1566:	0e 94 0c 01 	call	0x218	; 0x218 <_ZN14HardwareSerial5beginEmh>
    156a:	26 96       	adiw	r28, 0x06	; 6
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	00 d0       	rcall	.+0      	; 0x1582 <crc_accumulate+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <crc_accumulate+0x8>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	7c 83       	std	Y+4, r23	; 0x04
    158c:	6b 83       	std	Y+3, r22	; 0x03
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	fc 01       	movw	r30, r24
    1594:	80 81       	ld	r24, Z
    1596:	91 81       	ldd	r25, Z+1	; 0x01
    1598:	98 2f       	mov	r25, r24
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	89 27       	eor	r24, r25
    159e:	89 83       	std	Y+1, r24	; 0x01
        tmp ^= (tmp<<4);
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	82 95       	swap	r24
    15a8:	92 95       	swap	r25
    15aa:	90 7f       	andi	r25, 0xF0	; 240
    15ac:	98 27       	eor	r25, r24
    15ae:	80 7f       	andi	r24, 0xF0	; 240
    15b0:	98 27       	eor	r25, r24
    15b2:	98 2f       	mov	r25, r24
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	89 27       	eor	r24, r25
    15b8:	89 83       	std	Y+1, r24	; 0x01
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	fc 01       	movw	r30, r24
    15c0:	80 81       	ld	r24, Z
    15c2:	91 81       	ldd	r25, Z+1	; 0x01
    15c4:	29 2f       	mov	r18, r25
    15c6:	33 27       	eor	r19, r19
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	98 2f       	mov	r25, r24
    15d0:	88 27       	eor	r24, r24
    15d2:	28 27       	eor	r18, r24
    15d4:	39 27       	eor	r19, r25
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	28 27       	eor	r18, r24
    15ea:	39 27       	eor	r19, r25
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	95 95       	asr	r25
    15f4:	87 95       	ror	r24
    15f6:	95 95       	asr	r25
    15f8:	87 95       	ror	r24
    15fa:	95 95       	asr	r25
    15fc:	87 95       	ror	r24
    15fe:	95 95       	asr	r25
    1600:	87 95       	ror	r24
    1602:	28 27       	eor	r18, r24
    1604:	39 27       	eor	r19, r25
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	fc 01       	movw	r30, r24
    160c:	31 83       	std	Z+1, r19	; 0x01
    160e:	20 83       	st	Z, r18
}
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	00 d0       	rcall	.+0      	; 0x1624 <crc_init+0x6>
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
        *crcAccum = X25_INIT_CRC;
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	9a 81       	ldd	r25, Y+2	; 0x02
    1630:	2f ef       	ldi	r18, 0xFF	; 255
    1632:	3f ef       	ldi	r19, 0xFF	; 255
    1634:	fc 01       	movw	r30, r24
    1636:	31 83       	std	Z+1, r19	; 0x01
    1638:	20 83       	st	Z, r18
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	00 d0       	rcall	.+0      	; 0x164a <crc_calculate+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <crc_calculate+0x8>
    164c:	00 d0       	rcall	.+0      	; 0x164e <crc_calculate+0xa>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	9c 83       	std	Y+4, r25	; 0x04
    1654:	8b 83       	std	Y+3, r24	; 0x03
    1656:	7e 83       	std	Y+6, r23	; 0x06
    1658:	6d 83       	std	Y+5, r22	; 0x05
        uint16_t crcTmp;
        crc_init(&crcTmp);
    165a:	ce 01       	movw	r24, r28
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	df df       	rcall	.-66     	; 0x161e <crc_init>
    1660:	0e c0       	rjmp	.+28     	; 0x167e <crc_calculate+0x3a>
	while (length--) {
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
                crc_accumulate(*pBuffer++, &crcTmp);
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	9c 01       	movw	r18, r24
    1668:	2f 5f       	subi	r18, 0xFF	; 255
    166a:	3f 4f       	sbci	r19, 0xFF	; 255
    166c:	3c 83       	std	Y+4, r19	; 0x04
    166e:	2b 83       	std	Y+3, r18	; 0x03
    1670:	fc 01       	movw	r30, r24
    1672:	20 81       	ld	r18, Z
    1674:	ce 01       	movw	r24, r28
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	bc 01       	movw	r22, r24
    167a:	82 2f       	mov	r24, r18
    167c:	7f df       	rcall	.-258    	; 0x157c <crc_accumulate>
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
    1682:	9c 01       	movw	r18, r24
    1684:	21 50       	subi	r18, 0x01	; 1
    1686:	31 09       	sbc	r19, r1
    1688:	3e 83       	std	Y+6, r19	; 0x06
    168a:	2d 83       	std	Y+5, r18	; 0x05
    168c:	21 e0       	ldi	r18, 0x01	; 1
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	09 f4       	brne	.+2      	; 0x1694 <crc_calculate+0x50>
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	22 23       	and	r18, r18
    1696:	29 f7       	brne	.-54     	; 0x1662 <crc_calculate+0x1e>
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	9a 81       	ldd	r25, Y+2	; 0x02
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
    169c:	26 96       	adiw	r28, 0x06	; 6
    169e:	0f b6       	in	r0, 0x3f	; 63
}
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	28 97       	sbiw	r28, 0x08	; 8
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	9c 83       	std	Y+4, r25	; 0x04
    16c4:	8b 83       	std	Y+3, r24	; 0x03
    16c6:	7e 83       	std	Y+6, r23	; 0x06
    16c8:	6d 83       	std	Y+5, r22	; 0x05
    16ca:	58 87       	std	Y+8, r21	; 0x08
    16cc:	4f 83       	std	Y+7, r20	; 0x07
	const uint8_t *p = (const uint8_t *)pBuffer;
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
	while (length--) {
    16d6:	0e c0       	rjmp	.+28     	; 0x16f4 <crc_accumulate_buffer+0x46>
                crc_accumulate(*p++, crcAccum);
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	9c 01       	movw	r18, r24
    16de:	2f 5f       	subi	r18, 0xFF	; 255
    16e0:	3f 4f       	sbci	r19, 0xFF	; 255
    16e2:	3a 83       	std	Y+2, r19	; 0x02
    16e4:	29 83       	std	Y+1, r18	; 0x01
    16e6:	fc 01       	movw	r30, r24
    16e8:	20 81       	ld	r18, Z
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	bc 01       	movw	r22, r24
    16f0:	82 2f       	mov	r24, r18
    16f2:	44 df       	rcall	.-376    	; 0x157c <crc_accumulate>
    16f4:	8f 81       	ldd	r24, Y+7	; 0x07
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
    16f6:	98 85       	ldd	r25, Y+8	; 0x08
    16f8:	9c 01       	movw	r18, r24
    16fa:	21 50       	subi	r18, 0x01	; 1
    16fc:	31 09       	sbc	r19, r1
    16fe:	38 87       	std	Y+8, r19	; 0x08
    1700:	2f 83       	std	Y+7, r18	; 0x07
    1702:	21 e0       	ldi	r18, 0x01	; 1
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	09 f4       	brne	.+2      	; 0x170a <crc_accumulate_buffer+0x5c>
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	22 23       	and	r18, r18
    170c:	29 f7       	brne	.-54     	; 0x16d8 <crc_accumulate_buffer+0x2a>
    170e:	28 96       	adiw	r28, 0x08	; 8
                crc_accumulate(*p++, crcAccum);
        }
}
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	08 95       	ret

00001720 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	1f 92       	push	r1
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	89 83       	std	Y+1, r24	; 0x01
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	28 2f       	mov	r18, r24
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	4b e0       	ldi	r20, 0x0B	; 11
    1734:	42 9f       	mul	r20, r18
    1736:	c0 01       	movw	r24, r0
    1738:	43 9f       	mul	r20, r19
    173a:	90 0d       	add	r25, r0
    173c:	11 24       	eor	r1, r1
    173e:	89 5c       	subi	r24, 0xC9	; 201
    1740:	98 4f       	sbci	r25, 0xF8	; 248
}
    1742:	0f 90       	pop	r0
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	1f 92       	push	r1
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	89 83       	std	Y+1, r24	; 0x01
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	48 2f       	mov	r20, r24
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	20 e1       	ldi	r18, 0x10	; 16
    175e:	31 e0       	ldi	r19, 0x01	; 1
    1760:	42 9f       	mul	r20, r18
    1762:	c0 01       	movw	r24, r0
    1764:	43 9f       	mul	r20, r19
    1766:	90 0d       	add	r25, r0
    1768:	52 9f       	mul	r21, r18
    176a:	90 0d       	add	r25, r0
    176c:	11 24       	eor	r1, r1
    176e:	89 50       	subi	r24, 0x09	; 9
    1770:	9d 4f       	sbci	r25, 0xFD	; 253
}
    1772:	0f 90       	pop	r0
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
    177a:	ef 92       	push	r14
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	27 97       	sbiw	r28, 0x07	; 7
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	6b 83       	std	Y+3, r22	; 0x03
    179a:	4c 83       	std	Y+4, r20	; 0x04
    179c:	2d 83       	std	Y+5, r18	; 0x05
    179e:	0e 83       	std	Y+6, r16	; 0x06
    17a0:	ef 82       	std	Y+7, r14	; 0x07
	// This code part is the same for all messages;
	msg->magic = MAVLINK_STX;
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	2e ef       	ldi	r18, 0xFE	; 254
    17a8:	fc 01       	movw	r30, r24
    17aa:	22 83       	std	Z+2, r18	; 0x02
	msg->len = length;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	2e 81       	ldd	r18, Y+6	; 0x06
    17b2:	fc 01       	movw	r30, r24
    17b4:	23 83       	std	Z+3, r18	; 0x03
	msg->sysid = system_id;
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ba:	2b 81       	ldd	r18, Y+3	; 0x03
    17bc:	fc 01       	movw	r30, r24
    17be:	25 83       	std	Z+5, r18	; 0x05
	msg->compid = component_id;
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	2c 81       	ldd	r18, Y+4	; 0x04
    17c6:	fc 01       	movw	r30, r24
    17c8:	26 83       	std	Z+6, r18	; 0x06
	// One sequence number per channel
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
    17ca:	8d 81       	ldd	r24, Y+5	; 0x05
    17cc:	a9 df       	rcall	.-174    	; 0x1720 <mavlink_get_channel_status>
    17ce:	fc 01       	movw	r30, r24
    17d0:	26 81       	ldd	r18, Z+6	; 0x06
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	fc 01       	movw	r30, r24
    17d8:	24 83       	std	Z+4, r18	; 0x04
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
    17dc:	a1 df       	rcall	.-190    	; 0x1720 <mavlink_get_channel_status>
    17de:	8c 01       	movw	r16, r24
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e df       	rcall	.-196    	; 0x1720 <mavlink_get_channel_status>
    17e4:	fc 01       	movw	r30, r24
    17e6:	86 81       	ldd	r24, Z+6	; 0x06
    17e8:	8f 5f       	subi	r24, 0xFF	; 255
    17ea:	f8 01       	movw	r30, r16
    17ec:	86 83       	std	Z+6, r24	; 0x06
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	03 96       	adiw	r24, 0x03	; 3
	msg->checksum = crc_calculate(((const uint8_t*)(msg)) + 3, MAVLINK_CORE_HEADER_LEN);
    17f4:	65 e0       	ldi	r22, 0x05	; 5
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	25 df       	rcall	.-438    	; 0x1644 <crc_calculate>
    17fa:	9c 01       	movw	r18, r24
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	fc 01       	movw	r30, r24
    1802:	31 83       	std	Z+1, r19	; 0x01
    1804:	20 83       	st	Z, r18
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	fc 01       	movw	r30, r24
    180c:	83 81       	ldd	r24, Z+3	; 0x03
	crc_accumulate_buffer(&msg->checksum, _MAV_PAYLOAD(msg), msg->len);
    180e:	48 2f       	mov	r20, r24
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	9c 01       	movw	r18, r24
    1818:	28 5f       	subi	r18, 0xF8	; 248
    181a:	3f 4f       	sbci	r19, 0xFF	; 255
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	9a 81       	ldd	r25, Y+2	; 0x02
    1820:	b9 01       	movw	r22, r18
    1822:	45 df       	rcall	.-374    	; 0x16ae <crc_accumulate_buffer>
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	9a 81       	ldd	r25, Y+2	; 0x02
    1828:	bc 01       	movw	r22, r24
    182a:	8f 81       	ldd	r24, Y+7	; 0x07
    182c:	a7 de       	rcall	.-690    	; 0x157c <crc_accumulate>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &msg->checksum);
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	9a 81       	ldd	r25, Y+2	; 0x02
    1832:	9c 01       	movw	r18, r24
    1834:	28 5f       	subi	r18, 0xF8	; 248
    1836:	3f 4f       	sbci	r19, 0xFF	; 255
    1838:	89 81       	ldd	r24, Y+1	; 0x01
#endif
	mavlink_ck_a(msg) = (uint8_t)(msg->checksum & 0xFF);
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	fc 01       	movw	r30, r24
    183e:	83 81       	ldd	r24, Z+3	; 0x03
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	82 0f       	add	r24, r18
    1846:	93 1f       	adc	r25, r19
    1848:	29 81       	ldd	r18, Y+1	; 0x01
    184a:	3a 81       	ldd	r19, Y+2	; 0x02
    184c:	f9 01       	movw	r30, r18
    184e:	20 81       	ld	r18, Z
    1850:	31 81       	ldd	r19, Z+1	; 0x01
    1852:	fc 01       	movw	r30, r24
    1854:	20 83       	st	Z, r18
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	9a 81       	ldd	r25, Y+2	; 0x02
    185a:	9c 01       	movw	r18, r24
    185c:	28 5f       	subi	r18, 0xF8	; 248
    185e:	3f 4f       	sbci	r19, 0xFF	; 255
    1860:	89 81       	ldd	r24, Y+1	; 0x01
	mavlink_ck_b(msg) = (uint8_t)(msg->checksum >> 8);
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
    1864:	fc 01       	movw	r30, r24
    1866:	83 81       	ldd	r24, Z+3	; 0x03
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	01 96       	adiw	r24, 0x01	; 1
    186e:	82 0f       	add	r24, r18
    1870:	93 1f       	adc	r25, r19
    1872:	29 81       	ldd	r18, Y+1	; 0x01
    1874:	3a 81       	ldd	r19, Y+2	; 0x02
    1876:	f9 01       	movw	r30, r18
    1878:	20 81       	ld	r18, Z
    187a:	31 81       	ldd	r19, Z+1	; 0x01
    187c:	23 2f       	mov	r18, r19
    187e:	33 27       	eor	r19, r19
    1880:	fc 01       	movw	r30, r24
    1882:	20 83       	st	Z, r18
    1884:	8e 81       	ldd	r24, Y+6	; 0x06
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	08 96       	adiw	r24, 0x08	; 8
    188c:	27 96       	adiw	r28, 0x07	; 7
    188e:	0f b6       	in	r0, 0x3f	; 63

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
}
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ef 90       	pop	r14
    18a2:	08 95       	ret

000018a4 <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
    18a4:	ef 92       	push	r14
    18a6:	0f 93       	push	r16
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <mavlink_finalize_message+0xa>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <mavlink_finalize_message+0xc>
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <mavlink_finalize_message+0xe>
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	6b 83       	std	Y+3, r22	; 0x03
    18bc:	4c 83       	std	Y+4, r20	; 0x04
    18be:	2d 83       	std	Y+5, r18	; 0x05
    18c0:	0e 83       	std	Y+6, r16	; 0x06
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	ee 80       	ldd	r14, Y+6	; 0x06
    18c8:	0d 81       	ldd	r16, Y+5	; 0x05
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	4c 81       	ldd	r20, Y+4	; 0x04
    18ce:	6b 81       	ldd	r22, Y+3	; 0x03
    18d0:	54 df       	rcall	.-344    	; 0x177a <mavlink_finalize_message_chan>
    18d2:	26 96       	adiw	r28, 0x06	; 6
}
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	0f 91       	pop	r16
    18e4:	ef 90       	pop	r14
    18e6:	08 95       	ret

000018e8 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <mavlink_msg_to_send_buffer+0x6>
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <mavlink_msg_to_send_buffer+0x8>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <mavlink_msg_to_send_buffer+0xa>
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	9c 83       	std	Y+4, r25	; 0x04
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	7e 83       	std	Y+6, r23	; 0x06
    18fc:	6d 83       	std	Y+5, r22	; 0x05
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
    18fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1900:	9e 81       	ldd	r25, Y+6	; 0x06
    1902:	fc 01       	movw	r30, r24
    1904:	83 81       	ldd	r24, Z+3	; 0x03
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	ac 01       	movw	r20, r24
    190c:	4a 5f       	subi	r20, 0xFA	; 250
    190e:	5f 4f       	sbci	r21, 0xFF	; 255
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	9c 01       	movw	r18, r24
    1916:	2e 5f       	subi	r18, 0xFE	; 254
    1918:	3f 4f       	sbci	r19, 0xFF	; 255
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	b9 01       	movw	r22, r18
    1920:	d9 d3       	rcall	.+1970   	; 0x20d4 <memcpy>
    1922:	8d 81       	ldd	r24, Y+5	; 0x05

	uint8_t *ck = buffer + (MAVLINK_NUM_HEADER_BYTES + (uint16_t)msg->len);
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	fc 01       	movw	r30, r24
    1928:	83 81       	ldd	r24, Z+3	; 0x03
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	06 96       	adiw	r24, 0x06	; 6
    1930:	2b 81       	ldd	r18, Y+3	; 0x03
    1932:	3c 81       	ldd	r19, Y+4	; 0x04
    1934:	82 0f       	add	r24, r18
    1936:	93 1f       	adc	r25, r19
    1938:	9a 83       	std	Y+2, r25	; 0x02
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	8d 81       	ldd	r24, Y+5	; 0x05

	ck[0] = (uint8_t)(msg->checksum & 0xFF);
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	fc 01       	movw	r30, r24
    1942:	80 81       	ld	r24, Z
    1944:	91 81       	ldd	r25, Z+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	fc 01       	movw	r30, r24
    194e:	20 83       	st	Z, r18
    1950:	89 81       	ldd	r24, Y+1	; 0x01
	ck[1] = (uint8_t)(msg->checksum >> 8);
    1952:	9a 81       	ldd	r25, Y+2	; 0x02
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	2d 81       	ldd	r18, Y+5	; 0x05
    1958:	3e 81       	ldd	r19, Y+6	; 0x06
    195a:	f9 01       	movw	r30, r18
    195c:	20 81       	ld	r18, Z
    195e:	31 81       	ldd	r19, Z+1	; 0x01
    1960:	23 2f       	mov	r18, r19
    1962:	33 27       	eor	r19, r19
    1964:	fc 01       	movw	r30, r24
    1966:	20 83       	st	Z, r18
    1968:	8d 81       	ldd	r24, Y+5	; 0x05

	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	fc 01       	movw	r30, r24
    196e:	83 81       	ldd	r24, Z+3	; 0x03
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	08 96       	adiw	r24, 0x08	; 8
    1976:	26 96       	adiw	r28, 0x06	; 6
}
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	08 95       	ret

00001988 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	00 d0       	rcall	.+0      	; 0x198e <mavlink_start_checksum+0x6>
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	9a 83       	std	Y+2, r25	; 0x02
    1994:	89 83       	std	Y+1, r24	; 0x01
	crc_init(&msg->checksum);
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	41 de       	rcall	.-894    	; 0x161e <crc_init>
    199c:	0f 90       	pop	r0
}
    199e:	0f 90       	pop	r0
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	08 95       	ret

000019a6 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <mavlink_update_checksum+0x6>
    19ac:	1f 92       	push	r1
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	9a 83       	std	Y+2, r25	; 0x02
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	6b 83       	std	Y+3, r22	; 0x03
	crc_accumulate(c, &msg->checksum);
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	bc 01       	movw	r22, r24
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	dd dd       	rcall	.-1094   	; 0x157c <crc_accumulate>
    19c2:	0f 90       	pop	r0
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	08 95       	ret

000019ce <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	2c 97       	sbiw	r28, 0x0c	; 12
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	8f 83       	std	Y+7, r24	; 0x07
    19e4:	68 87       	std	Y+8, r22	; 0x08
    19e6:	5a 87       	std	Y+10, r21	; 0x0a
    19e8:	49 87       	std	Y+9, r20	; 0x09
    19ea:	3c 87       	std	Y+12, r19	; 0x0c
    19ec:	2b 87       	std	Y+11, r18	; 0x0b
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan); ///< The currently decoded message
    19ee:	8f 81       	ldd	r24, Y+7	; 0x07
    19f0:	ac de       	rcall	.-680    	; 0x174a <mavlink_get_channel_buffer>
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	8f 81       	ldd	r24, Y+7	; 0x07
	mavlink_status_t* status = mavlink_get_channel_status(chan); ///< The current decode status
    19f8:	93 de       	rcall	.-730    	; 0x1720 <mavlink_get_channel_status>
    19fa:	9c 83       	std	Y+4, r25	; 0x04
    19fc:	8b 83       	std	Y+3, r24	; 0x03
    19fe:	1e 82       	std	Y+6, r1	; 0x06
    1a00:	1d 82       	std	Y+5, r1	; 0x05
	int bufferIndex = 0;
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
    1a06:	fc 01       	movw	r30, r24
    1a08:	10 82       	st	Z, r1
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04

	switch (status->parse_state)
    1a0e:	fc 01       	movw	r30, r24
    1a10:	83 81       	ldd	r24, Z+3	; 0x03
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	aa 27       	eor	r26, r26
    1a18:	97 fd       	sbrc	r25, 7
    1a1a:	a0 95       	com	r26
    1a1c:	ba 2f       	mov	r27, r26
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	50 e0       	ldi	r21, 0x00	; 0
    1a22:	2a e0       	ldi	r18, 0x0A	; 10
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	84 1b       	sub	r24, r20
    1a28:	95 0b       	sbc	r25, r21
    1a2a:	28 17       	cp	r18, r24
    1a2c:	39 07       	cpc	r19, r25
    1a2e:	08 f4       	brcc	.+2      	; 0x1a32 <mavlink_frame_char+0x64>
    1a30:	35 c1       	rjmp	.+618    	; 0x1c9c <mavlink_frame_char+0x2ce>
    1a32:	8c 5c       	subi	r24, 0xCC	; 204
    1a34:	9f 4f       	sbci	r25, 0xFF	; 255
    1a36:	fc 01       	movw	r30, r24
    1a38:	43 c3       	rjmp	.+1670   	; 0x20c0 <__tablejump2__>
    1a3a:	88 85       	ldd	r24, Y+8	; 0x08
    1a3c:	8e 3f       	cpi	r24, 0xFE	; 254
    1a3e:	89 f4       	brne	.+34     	; 0x1a62 <mavlink_frame_char+0x94>
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	22 e0       	ldi	r18, 0x02	; 2
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
    1a46:	fc 01       	movw	r30, r24
    1a48:	23 83       	std	Z+3, r18	; 0x03
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	fc 01       	movw	r30, r24
			rxmsg->len = 0;
    1a50:	13 82       	std	Z+3, r1	; 0x03
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	28 85       	ldd	r18, Y+8	; 0x08
			rxmsg->magic = c;
    1a58:	fc 01       	movw	r30, r24
    1a5a:	22 83       	std	Z+2, r18	; 0x02
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	93 df       	rcall	.-218    	; 0x1988 <mavlink_start_checksum>
			mavlink_start_checksum(rxmsg);
    1a62:	1c c1       	rjmp	.+568    	; 0x1c9c <mavlink_frame_char+0x2ce>
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	fc 01       	movw	r30, r24
		}
		break;
    1a6a:	80 81       	ld	r24, Z

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
    1a6c:	88 23       	and	r24, r24
    1a6e:	f1 f0       	breq	.+60     	; 0x1aac <mavlink_frame_char+0xde>
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	fc 01       	movw	r30, r24
    1a76:	81 81       	ldd	r24, Z+1	; 0x01
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
    1a78:	21 e0       	ldi	r18, 0x01	; 1
    1a7a:	28 0f       	add	r18, r24
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	fc 01       	movw	r30, r24
    1a82:	21 83       	std	Z+1, r18	; 0x01
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	fc 01       	movw	r30, r24
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
			status->parse_error++;
    1a8c:	21 e0       	ldi	r18, 0x01	; 1
    1a8e:	28 0f       	add	r18, r24
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	9c 81       	ldd	r25, Y+4	; 0x04
    1a94:	fc 01       	movw	r30, r24
    1a96:	22 83       	std	Z+2, r18	; 0x02
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	10 82       	st	Z, r1
			status->msg_received = 0;
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	21 e0       	ldi	r18, 0x01	; 1
    1aa6:	fc 01       	movw	r30, r24
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
    1aa8:	23 83       	std	Z+3, r18	; 0x03
    1aaa:	f8 c0       	rjmp	.+496    	; 0x1c9c <mavlink_frame_char+0x2ce>
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab0:	28 85       	ldd	r18, Y+8	; 0x08
			rxmsg->len = c;
			status->packet_idx = 0;
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;
    1ab2:	fc 01       	movw	r30, r24
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
    1ab4:	23 83       	std	Z+3, r18	; 0x03
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	fc 01       	movw	r30, r24
    1abc:	14 82       	std	Z+4, r1	; 0x04
			status->packet_idx = 0;
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	68 85       	ldd	r22, Y+8	; 0x08
    1ac4:	70 df       	rcall	.-288    	; 0x19a6 <mavlink_update_checksum>
			mavlink_update_checksum(rxmsg, c);
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	24 e0       	ldi	r18, 0x04	; 4
    1acc:	fc 01       	movw	r30, r24
    1ace:	23 83       	std	Z+3, r18	; 0x03
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
    1ad0:	e5 c0       	rjmp	.+458    	; 0x1c9c <mavlink_frame_char+0x2ce>
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	28 85       	ldd	r18, Y+8	; 0x08
    1ad8:	fc 01       	movw	r30, r24
		}
		break;
    1ada:	24 83       	std	Z+4, r18	; 0x04

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	68 85       	ldd	r22, Y+8	; 0x08
    1ae2:	61 df       	rcall	.-318    	; 0x19a6 <mavlink_update_checksum>
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
		mavlink_update_checksum(rxmsg, c);
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	23 e0       	ldi	r18, 0x03	; 3
    1aea:	fc 01       	movw	r30, r24
    1aec:	23 83       	std	Z+3, r18	; 0x03
    1aee:	d6 c0       	rjmp	.+428    	; 0x1c9c <mavlink_frame_char+0x2ce>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	28 85       	ldd	r18, Y+8	; 0x08
    1af6:	fc 01       	movw	r30, r24
    1af8:	25 83       	std	Z+5, r18	; 0x05
		break;
    1afa:	89 81       	ldd	r24, Y+1	; 0x01

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	68 85       	ldd	r22, Y+8	; 0x08
    1b00:	52 df       	rcall	.-348    	; 0x19a6 <mavlink_update_checksum>
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
		mavlink_update_checksum(rxmsg, c);
    1b06:	25 e0       	ldi	r18, 0x05	; 5
    1b08:	fc 01       	movw	r30, r24
    1b0a:	23 83       	std	Z+3, r18	; 0x03
    1b0c:	c7 c0       	rjmp	.+398    	; 0x1c9c <mavlink_frame_char+0x2ce>
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	28 85       	ldd	r18, Y+8	; 0x08
    1b14:	fc 01       	movw	r30, r24
    1b16:	26 83       	std	Z+6, r18	; 0x06
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
		break;
    1b1a:	9a 81       	ldd	r25, Y+2	; 0x02

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
    1b1c:	68 85       	ldd	r22, Y+8	; 0x08
    1b1e:	43 df       	rcall	.-378    	; 0x19a6 <mavlink_update_checksum>
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	26 e0       	ldi	r18, 0x06	; 6
		mavlink_update_checksum(rxmsg, c);
    1b26:	fc 01       	movw	r30, r24
    1b28:	23 83       	std	Z+3, r18	; 0x03
    1b2a:	b8 c0       	rjmp	.+368    	; 0x1c9c <mavlink_frame_char+0x2ce>
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	9a 81       	ldd	r25, Y+2	; 0x02
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
    1b30:	28 85       	ldd	r18, Y+8	; 0x08
    1b32:	fc 01       	movw	r30, r24
    1b34:	27 83       	std	Z+7, r18	; 0x07
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	9a 81       	ldd	r25, Y+2	; 0x02
		break;
    1b3a:	68 85       	ldd	r22, Y+8	; 0x08
			status->parse_error++;
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
	    }
#endif
		rxmsg->msgid = c;
    1b3c:	34 df       	rcall	.-408    	; 0x19a6 <mavlink_update_checksum>
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	fc 01       	movw	r30, r24
    1b44:	83 81       	ldd	r24, Z+3	; 0x03
		mavlink_update_checksum(rxmsg, c);
    1b46:	88 23       	and	r24, r24
    1b48:	31 f4       	brne	.+12     	; 0x1b56 <mavlink_frame_char+0x188>
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	28 e0       	ldi	r18, 0x08	; 8
		if (rxmsg->len == 0)
    1b50:	fc 01       	movw	r30, r24
    1b52:	23 83       	std	Z+3, r18	; 0x03
    1b54:	a3 c0       	rjmp	.+326    	; 0x1c9c <mavlink_frame_char+0x2ce>
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	27 e0       	ldi	r18, 0x07	; 7
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	23 83       	std	Z+3, r18	; 0x03
    1b60:	9d c0       	rjmp	.+314    	; 0x1c9c <mavlink_frame_char+0x2ce>
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;
    1b66:	9c 01       	movw	r18, r24
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
    1b68:	28 5f       	subi	r18, 0xF8	; 248
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	fc 01       	movw	r30, r24
		}
		break;
    1b72:	44 81       	ldd	r20, Z+4	; 0x04

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
    1b74:	51 e0       	ldi	r21, 0x01	; 1
    1b76:	54 0f       	add	r21, r20
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	54 83       	std	Z+4, r21	; 0x04
    1b80:	84 2f       	mov	r24, r20
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	82 0f       	add	r24, r18
    1b86:	93 1f       	adc	r25, r19
    1b88:	28 85       	ldd	r18, Y+8	; 0x08
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	20 83       	st	Z, r18
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	9a 81       	ldd	r25, Y+2	; 0x02
    1b92:	68 85       	ldd	r22, Y+8	; 0x08
    1b94:	08 df       	rcall	.-496    	; 0x19a6 <mavlink_update_checksum>
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	24 81       	ldd	r18, Z+4	; 0x04
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
		mavlink_update_checksum(rxmsg, c);
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	83 81       	ldd	r24, Z+3	; 0x03
    1ba6:	28 17       	cp	r18, r24
    1ba8:	29 f4       	brne	.+10     	; 0x1bb4 <mavlink_frame_char+0x1e6>
		if (status->packet_idx == rxmsg->len)
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	28 e0       	ldi	r18, 0x08	; 8
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	23 83       	std	Z+3, r18	; 0x03
    1bb4:	73 c0       	rjmp	.+230    	; 0x1c9c <mavlink_frame_char+0x2ce>
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	fc 01       	movw	r30, r24
    1bbc:	87 81       	ldd	r24, Z+7	; 0x07
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	81 5c       	subi	r24, 0xC1	; 193
    1bc4:	9e 4f       	sbci	r25, 0xFE	; 254
    1bc6:	fc 01       	movw	r30, r24
		}
		break;
    1bc8:	20 81       	ld	r18, Z

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	62 2f       	mov	r22, r18
    1bd0:	ea de       	rcall	.-556    	; 0x19a6 <mavlink_update_checksum>
    1bd2:	88 85       	ldd	r24, Y+8	; 0x08
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	fc 01       	movw	r30, r24
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	99 27       	eor	r25, r25
    1be4:	28 17       	cp	r18, r24
    1be6:	39 07       	cpc	r19, r25
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
    1be8:	31 f0       	breq	.+12     	; 0x1bf6 <mavlink_frame_char+0x228>
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	2a e0       	ldi	r18, 0x0A	; 10
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	23 83       	std	Z+3, r18	; 0x03
    1bf4:	05 c0       	rjmp	.+10     	; 0x1c00 <mavlink_frame_char+0x232>
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	29 e0       	ldi	r18, 0x09	; 9
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	23 83       	std	Z+3, r18	; 0x03
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	9a 81       	ldd	r25, Y+2	; 0x02
    1c04:	9c 01       	movw	r18, r24
    1c06:	28 5f       	subi	r18, 0xF8	; 248
    1c08:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	fc 01       	movw	r30, r24
    1c10:	84 81       	ldd	r24, Z+4	; 0x04
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
		}
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
    1c16:	82 0f       	add	r24, r18
    1c18:	93 1f       	adc	r25, r19
    1c1a:	28 85       	ldd	r18, Y+8	; 0x08
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	20 83       	st	Z, r18
    1c20:	3d c0       	rjmp	.+122    	; 0x1c9c <mavlink_frame_char+0x2ce>
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	fc 01       	movw	r30, r24
    1c28:	83 81       	ldd	r24, Z+3	; 0x03
    1c2a:	8a 30       	cpi	r24, 0x0A	; 10
    1c2c:	69 f0       	breq	.+26     	; 0x1c48 <mavlink_frame_char+0x27a>
    1c2e:	88 85       	ldd	r24, Y+8	; 0x08
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
		break;
    1c36:	9a 81       	ldd	r25, Y+2	; 0x02

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
    1c38:	fc 01       	movw	r30, r24
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	89 2f       	mov	r24, r25
    1c40:	99 27       	eor	r25, r25
    1c42:	28 17       	cp	r18, r24
    1c44:	39 07       	cpc	r19, r25
    1c46:	31 f0       	breq	.+12     	; 0x1c54 <mavlink_frame_char+0x286>
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	22 e0       	ldi	r18, 0x02	; 2
    1c4e:	fc 01       	movw	r30, r24
    1c50:	20 83       	st	Z, r18
    1c52:	05 c0       	rjmp	.+10     	; 0x1c5e <mavlink_frame_char+0x290>
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	21 e0       	ldi	r18, 0x01	; 1
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	20 83       	st	Z, r18
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	9c 81       	ldd	r25, Y+4	; 0x04
    1c62:	21 e0       	ldi	r18, 0x01	; 1
    1c64:	fc 01       	movw	r30, r24
    1c66:	23 83       	std	Z+3, r18	; 0x03
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	9c 01       	movw	r18, r24
    1c6e:	28 5f       	subi	r18, 0xF8	; 248
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
                }
                status->parse_state = MAVLINK_PARSE_STATE_IDLE;
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	fc 01       	movw	r30, r24
    1c78:	84 81       	ldd	r24, Z+4	; 0x04
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
                _MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	28 85       	ldd	r18, Y+8	; 0x08
    1c86:	fc 01       	movw	r30, r24
    1c88:	20 83       	st	Z, r18
    1c8a:	29 81       	ldd	r18, Y+1	; 0x01
    1c8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c8e:	89 85       	ldd	r24, Y+9	; 0x09
    1c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c92:	40 e1       	ldi	r20, 0x10	; 16
    1c94:	51 e0       	ldi	r21, 0x01	; 1
    1c96:	b9 01       	movw	r22, r18
    1c98:	1d d2       	rcall	.+1082   	; 0x20d4 <memcpy>
    1c9a:	00 00       	nop
    1c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9e:	9e 81       	ldd	r25, Y+6	; 0x06
                memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	fc 01       	movw	r30, r24
    1cac:	80 81       	ld	r24, Z
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	09 f5       	brne	.+66     	; 0x1cf4 <mavlink_frame_char+0x326>
		break;
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
	}

	bufferIndex++;
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	24 81       	ldd	r18, Z+4	; 0x04
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	25 83       	std	Z+5, r18	; 0x05
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	87 81       	ldd	r24, Z+7	; 0x07
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
    1cca:	90 85       	ldd	r25, Z+8	; 0x08
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	29 f4       	brne	.+10     	; 0x1cda <mavlink_frame_char+0x30c>
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	12 86       	std	Z+10, r1	; 0x0a
    1cd8:	11 86       	std	Z+9, r1	; 0x09
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	fc 01       	movw	r30, r24
    1ce0:	87 81       	ldd	r24, Z+7	; 0x07
    1ce2:	90 85       	ldd	r25, Z+8	; 0x08
    1ce4:	9c 01       	movw	r18, r24
    1ce6:	2f 5f       	subi	r18, 0xFF	; 255
    1ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	fc 01       	movw	r30, r24
    1cf0:	30 87       	std	Z+8, r19	; 0x08
		// Count this packet as received
		status->packet_rx_success_count++;
    1cf2:	27 83       	std	Z+7, r18	; 0x07
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	23 81       	ldd	r18, Z+3	; 0x03
    1cfc:	89 85       	ldd	r24, Y+9	; 0x09
    1cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d00:	fc 01       	movw	r30, r24
    1d02:	23 83       	std	Z+3, r18	; 0x03
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	fc 01       	movw	r30, r24
    1d0a:	23 81       	ldd	r18, Z+3	; 0x03
	}

	r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
    1d0c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d0e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d10:	fc 01       	movw	r30, r24
    1d12:	23 83       	std	Z+3, r18	; 0x03
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	fc 01       	movw	r30, r24
    1d1a:	24 81       	ldd	r18, Z+4	; 0x04
	r_mavlink_status->parse_state = status->parse_state;
    1d1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d20:	fc 01       	movw	r30, r24
    1d22:	24 83       	std	Z+4, r18	; 0x04
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	fc 01       	movw	r30, r24
    1d2a:	85 81       	ldd	r24, Z+5	; 0x05
	r_mavlink_status->packet_idx = status->packet_idx;
    1d2c:	21 e0       	ldi	r18, 0x01	; 1
    1d2e:	28 0f       	add	r18, r24
    1d30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d34:	fc 01       	movw	r30, r24
    1d36:	25 83       	std	Z+5, r18	; 0x05
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	27 81       	ldd	r18, Z+7	; 0x07
    1d40:	30 85       	ldd	r19, Z+8	; 0x08
    1d42:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d44:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d46:	fc 01       	movw	r30, r24
    1d48:	30 87       	std	Z+8, r19	; 0x08
    1d4a:	27 83       	std	Z+7, r18	; 0x07
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
    1d50:	fc 01       	movw	r30, r24
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	32 87       	std	Z+10, r19	; 0x0a
    1d60:	21 87       	std	Z+9, r18	; 0x09
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	fc 01       	movw	r30, r24
    1d68:	12 82       	std	Z+2, r1	; 0x02
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6e:	fc 01       	movw	r30, r24
    1d70:	80 81       	ld	r24, Z
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	69 f5       	brne	.+90     	; 0x1dd0 <mavlink_frame_char+0x402>
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
	status->parse_error = 0;
    1d7a:	9c 01       	movw	r18, r24
    1d7c:	28 5f       	subi	r18, 0xF8	; 248
    1d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	fc 01       	movw	r30, r24
    1d86:	84 81       	ldd	r24, Z+4	; 0x04
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	82 0f       	add	r24, r18
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
		r_message->checksum = _MAV_PAYLOAD(rxmsg)[status->packet_idx] | (_MAV_PAYLOAD(rxmsg)[status->packet_idx+1]<<8);
    1d8e:	93 1f       	adc	r25, r19
    1d90:	fc 01       	movw	r30, r24
    1d92:	80 81       	ld	r24, Z
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	ac 01       	movw	r20, r24
    1d9e:	48 5f       	subi	r20, 0xF8	; 248
    1da0:	5f 4f       	sbci	r21, 0xFF	; 255
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	fc 01       	movw	r30, r24
    1da8:	84 81       	ldd	r24, Z+4	; 0x04
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	84 0f       	add	r24, r20
    1db2:	95 1f       	adc	r25, r21
    1db4:	fc 01       	movw	r30, r24
    1db6:	80 81       	ld	r24, Z
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	88 27       	eor	r24, r24
    1dc0:	82 2b       	or	r24, r18
    1dc2:	93 2b       	or	r25, r19
    1dc4:	9c 01       	movw	r18, r24
    1dc6:	89 85       	ldd	r24, Y+9	; 0x09
    1dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dca:	fc 01       	movw	r30, r24
    1dcc:	31 83       	std	Z+1, r19	; 0x01
    1dce:	20 83       	st	Z, r18
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	80 81       	ld	r24, Z
    1dd8:	2c 96       	adiw	r28, 0x0c	; 12
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
	}

	return status->msg_received;
    1de8:	08 95       	ret

00001dea <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	2b 97       	sbiw	r28, 0x0b	; 11
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	8e 83       	std	Y+6, r24	; 0x06
    1e00:	6f 83       	std	Y+7, r22	; 0x07
    1e02:	59 87       	std	Y+9, r21	; 0x09
    1e04:	48 87       	std	Y+8, r20	; 0x08
    1e06:	3b 87       	std	Y+11, r19	; 0x0b
    1e08:	2a 87       	std	Y+10, r18	; 0x0a
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
    1e0a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e0c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e0e:	88 85       	ldd	r24, Y+8	; 0x08
    1e10:	99 85       	ldd	r25, Y+9	; 0x09
    1e12:	ac 01       	movw	r20, r24
    1e14:	6f 81       	ldd	r22, Y+7	; 0x07
    1e16:	8e 81       	ldd	r24, Y+6	; 0x06
    1e18:	da dd       	rcall	.-1100   	; 0x19ce <mavlink_frame_char>
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    if (msg_received == MAVLINK_FRAMING_BAD_CRC) {
    1e1e:	82 30       	cpi	r24, 0x02	; 2
    1e20:	61 f5       	brne	.+88     	; 0x1e7a <mavlink_parse_char+0x90>
    1e22:	8e 81       	ldd	r24, Y+6	; 0x06
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
    1e24:	92 dc       	rcall	.-1756   	; 0x174a <mavlink_get_channel_buffer>
    1e26:	9b 83       	std	Y+3, r25	; 0x03
    1e28:	8a 83       	std	Y+2, r24	; 0x02
    1e2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e2c:	79 dc       	rcall	.-1806   	; 0x1720 <mavlink_get_channel_status>
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
    1e2e:	9d 83       	std	Y+5, r25	; 0x05
    1e30:	8c 83       	std	Y+4, r24	; 0x04
    1e32:	8c 81       	ldd	r24, Y+4	; 0x04
    1e34:	9d 81       	ldd	r25, Y+5	; 0x05
    1e36:	fc 01       	movw	r30, r24
	    status->parse_error++;
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	21 e0       	ldi	r18, 0x01	; 1
    1e3c:	28 0f       	add	r18, r24
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	9d 81       	ldd	r25, Y+5	; 0x05
    1e42:	fc 01       	movw	r30, r24
    1e44:	22 83       	std	Z+2, r18	; 0x02
    1e46:	8c 81       	ldd	r24, Y+4	; 0x04
    1e48:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4a:	fc 01       	movw	r30, r24
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
    1e4c:	10 82       	st	Z, r1
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	9d 81       	ldd	r25, Y+5	; 0x05
    1e52:	21 e0       	ldi	r18, 0x01	; 1
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
    1e54:	fc 01       	movw	r30, r24
    1e56:	23 83       	std	Z+3, r18	; 0x03
    1e58:	8f 81       	ldd	r24, Y+7	; 0x07
    1e5a:	8e 3f       	cpi	r24, 0xFE	; 254
    1e5c:	61 f4       	brne	.+24     	; 0x1e76 <mavlink_parse_char+0x8c>
	    if (c == MAVLINK_STX)
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	9d 81       	ldd	r25, Y+5	; 0x05
    1e62:	22 e0       	ldi	r18, 0x02	; 2
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
    1e64:	fc 01       	movw	r30, r24
    1e66:	23 83       	std	Z+3, r18	; 0x03
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6c:	fc 01       	movw	r30, r24
		    rxmsg->len = 0;
    1e6e:	13 82       	std	Z+3, r1	; 0x03
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	9b 81       	ldd	r25, Y+3	; 0x03
    1e74:	89 dd       	rcall	.-1262   	; 0x1988 <mavlink_start_checksum>
		    mavlink_start_checksum(rxmsg);
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	01 c0       	rjmp	.+2      	; 0x1e7c <mavlink_parse_char+0x92>
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	2b 96       	adiw	r28, 0x0b	; 11
	    }
	    return 0;
    1e7e:	0f b6       	in	r0, 0x3f	; 63
    1e80:	f8 94       	cli
    }
    return msg_received;
    1e82:	de bf       	out	0x3e, r29	; 62
}
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	cd bf       	out	0x3d, r28	; 61
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	08 95       	ret

00001e8e <mavlink_msg_heartbeat_pack>:
 * @param system_status System status flag, see MAV_STATE ENUM
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
    1e8e:	8f 92       	push	r8
    1e90:	af 92       	push	r10
    1e92:	bf 92       	push	r11
    1e94:	cf 92       	push	r12
    1e96:	df 92       	push	r13
    1e98:	ef 92       	push	r14
    1e9a:	0f 93       	push	r16
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	65 97       	sbiw	r28, 0x15	; 21
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	8a 87       	std	Y+10, r24	; 0x0a
    1eb2:	6b 87       	std	Y+11, r22	; 0x0b
    1eb4:	5d 87       	std	Y+13, r21	; 0x0d
    1eb6:	4c 87       	std	Y+12, r20	; 0x0c
    1eb8:	2e 87       	std	Y+14, r18	; 0x0e
    1eba:	0f 87       	std	Y+15, r16	; 0x0f
    1ebc:	e8 8a       	std	Y+16, r14	; 0x10
    1ebe:	a9 8a       	std	Y+17, r10	; 0x11
    1ec0:	ba 8a       	std	Y+18, r11	; 0x12
    1ec2:	cb 8a       	std	Y+19, r12	; 0x13
    1ec4:	dc 8a       	std	Y+20, r13	; 0x14
    1ec6:	8d 8a       	std	Y+21, r8	; 0x15
	_mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
	mavlink_heartbeat_t packet;
	packet.custom_mode = custom_mode;
    1ec8:	89 89       	ldd	r24, Y+17	; 0x11
    1eca:	9a 89       	ldd	r25, Y+18	; 0x12
    1ecc:	ab 89       	ldd	r26, Y+19	; 0x13
    1ece:	bc 89       	ldd	r27, Y+20	; 0x14
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	9a 83       	std	Y+2, r25	; 0x02
    1ed4:	ab 83       	std	Y+3, r26	; 0x03
    1ed6:	bc 83       	std	Y+4, r27	; 0x04
	packet.type = type;
    1ed8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eda:	8d 83       	std	Y+5, r24	; 0x05
	packet.autopilot = autopilot;
    1edc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ede:	8e 83       	std	Y+6, r24	; 0x06
	packet.base_mode = base_mode;
    1ee0:	88 89       	ldd	r24, Y+16	; 0x10
    1ee2:	8f 83       	std	Y+7, r24	; 0x07
	packet.system_status = system_status;
    1ee4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ee6:	88 87       	std	Y+8, r24	; 0x08
	packet.mavlink_version = 3;
    1ee8:	83 e0       	ldi	r24, 0x03	; 3
    1eea:	89 87       	std	Y+9, r24	; 0x09

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
    1eec:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eee:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ef0:	08 96       	adiw	r24, 0x08	; 8
    1ef2:	49 e0       	ldi	r20, 0x09	; 9
    1ef4:	9e 01       	movw	r18, r28
    1ef6:	2f 5f       	subi	r18, 0xFF	; 255
    1ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    1efa:	f9 01       	movw	r30, r18
    1efc:	dc 01       	movw	r26, r24
    1efe:	01 90       	ld	r0, Z+
    1f00:	0d 92       	st	X+, r0
    1f02:	4a 95       	dec	r20
    1f04:	e1 f7       	brne	.-8      	; 0x1efe <mavlink_msg_heartbeat_pack+0x70>
#endif

	msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
    1f06:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f08:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	17 82       	std	Z+7, r1	; 0x07
#if MAVLINK_CRC_EXTRA
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
    1f0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f10:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f12:	02 e3       	ldi	r16, 0x32	; 50
    1f14:	29 e0       	ldi	r18, 0x09	; 9
    1f16:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f18:	6a 85       	ldd	r22, Y+10	; 0x0a
    1f1a:	c4 dc       	rcall	.-1656   	; 0x18a4 <mavlink_finalize_message>
    1f1c:	65 96       	adiw	r28, 0x15	; 21
#else
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
}
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	0f 91       	pop	r16
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
    1f38:	8f 90       	pop	r8
    1f3a:	08 95       	ret

00001f3c <setup>:
#include "Arduino.h"
#include "mavlink.h"   // Mavlink interface

// FastSerialPort0(Serial);

void setup() {
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
	Serial.begin(57600);
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	51 ee       	ldi	r21, 0xE1	; 225
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	70 e0       	ldi	r23, 0x00	; 0
    1f4c:	80 e4       	ldi	r24, 0x40	; 64
    1f4e:	92 e0       	ldi	r25, 0x02	; 2
    1f50:	f3 da       	rcall	.-2586   	; 0x1538 <_ZN14HardwareSerial5beginEm>
    1f52:	df 91       	pop	r29
}
    1f54:	cf 91       	pop	r28
    1f56:	08 95       	ret

00001f58 <_Z12comm_receivev>:

void comm_receive() { 
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	cc 51       	subi	r28, 0x1C	; 28
    1f62:	d1 40       	sbci	r29, 0x01	; 1
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
	mavlink_message_t msg; 
	mavlink_status_t status;
	
	//receive data over serial 
	while(Serial.available() > 0) { 
    1f6e:	1d c0       	rjmp	.+58     	; 0x1faa <_Z12comm_receivev+0x52>
		uint8_t c = Serial.read();
    1f70:	80 e4       	ldi	r24, 0x40	; 64
    1f72:	92 e0       	ldi	r25, 0x02	; 2
    1f74:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN14HardwareSerial4readEv>
    1f78:	89 83       	std	Y+1, r24	; 0x01
		
		//try to get a new message 
		if(mavlink_parse_char(MAVLINK_COMM_0, c, &msg, &status)) { 
    1f7a:	9e 01       	movw	r18, r28
    1f7c:	2e 5f       	subi	r18, 0xFE	; 254
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	ce 01       	movw	r24, r28
    1f82:	0d 96       	adiw	r24, 0x0d	; 13
    1f84:	ac 01       	movw	r20, r24
    1f86:	69 81       	ldd	r22, Y+1	; 0x01
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	2f df       	rcall	.-418    	; 0x1dea <mavlink_parse_char>
    1f8c:	98 2f       	mov	r25, r24
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	99 23       	and	r25, r25
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <_Z12comm_receivev+0x3e>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	88 23       	and	r24, r24
    1f98:	41 f0       	breq	.+16     	; 0x1faa <_Z12comm_receivev+0x52>
    1f9a:	8c 89       	ldd	r24, Y+20	; 0x14
			// Handle message
 			switch(msg.msgid) {
    1f9c:	88 2f       	mov	r24, r24
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	8b 30       	cpi	r24, 0x0B	; 11
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <_Z12comm_receivev+0x50>
    1fa6:	01 c0       	rjmp	.+2      	; 0x1faa <_Z12comm_receivev+0x52>
			        //case MAVLINK_MSG_ID_ACTION:
					// EXECUTE ACTION
				break;
				default:
					//Do nothing
				break;
    1fa8:	00 00       	nop
			// Handle message
 			switch(msg.msgid) {
			        case MAVLINK_MSG_ID_SET_MODE: {
			        	// set mode
			        }
			        break;
    1faa:	80 e4       	ldi	r24, 0x40	; 64
void comm_receive() { 
	mavlink_message_t msg; 
	mavlink_status_t status;
	
	//receive data over serial 
	while(Serial.available() > 0) { 
    1fac:	92 e0       	ldi	r25, 0x02	; 2
    1fae:	0e 94 c4 01 	call	0x388	; 0x388 <_ZN14HardwareSerial9availableEv>
    1fb2:	21 e0       	ldi	r18, 0x01	; 1
    1fb4:	18 16       	cp	r1, r24
    1fb6:	19 06       	cpc	r1, r25
    1fb8:	0c f0       	brlt	.+2      	; 0x1fbc <_Z12comm_receivev+0x64>
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	22 23       	and	r18, r18
    1fbe:	c1 f6       	brne	.-80     	; 0x1f70 <_Z12comm_receivev+0x18>
    1fc0:	c4 5e       	subi	r28, 0xE4	; 228
				break;
			}
		} 
		// And get the next one
	}
}
    1fc2:	de 4f       	sbci	r29, 0xFE	; 254
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	08 95       	ret

00001fd4 <loop>:

void loop() {
    1fd4:	8f 92       	push	r8
    1fd6:	af 92       	push	r10
    1fd8:	bf 92       	push	r11
    1fda:	cf 92       	push	r12
    1fdc:	df 92       	push	r13
    1fde:	ef 92       	push	r14
    1fe0:	0f 93       	push	r16
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	cd 51       	subi	r28, 0x1D	; 29
    1fec:	d2 40       	sbci	r29, 0x02	; 2
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
	// Define the system type (see mavlink_types.h for list of possible types)
	int system_type = 4;
    1ff8:	84 e0       	ldi	r24, 0x04	; 4
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
	int autopilot_type = MAV_AUTOPILOT_GENERIC;
    2000:	1c 82       	std	Y+4, r1	; 0x04
    2002:	1b 82       	std	Y+3, r1	; 0x03
	mavlink_message_t msg;
	uint8_t buf[MAVLINK_MAX_PACKET_LEN];

	// Pack the message
	// mavlink_message_heartbeat_pack(system id, component id, message container, system type, MAV_AUTOPILOT_GENERIC)
	mavlink_msg_heartbeat_pack(100, 200, &msg, system_type, autopilot_type,0,0,0);
    2004:	3b 81       	ldd	r19, Y+3	; 0x03
    2006:	29 81       	ldd	r18, Y+1	; 0x01
    2008:	ce 01       	movw	r24, r28
    200a:	07 96       	adiw	r24, 0x07	; 7
    200c:	81 2c       	mov	r8, r1
    200e:	a1 2c       	mov	r10, r1
    2010:	b1 2c       	mov	r11, r1
    2012:	65 01       	movw	r12, r10
    2014:	e1 2c       	mov	r14, r1
    2016:	03 2f       	mov	r16, r19
    2018:	ac 01       	movw	r20, r24
    201a:	68 ec       	ldi	r22, 0xC8	; 200
    201c:	84 e6       	ldi	r24, 0x64	; 100
    201e:	37 df       	rcall	.-402    	; 0x1e8e <mavlink_msg_heartbeat_pack>
    2020:	9e 01       	movw	r18, r28

	// Copy the message to send buffer
	uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);
    2022:	29 5f       	subi	r18, 0xF9	; 249
    2024:	3f 4f       	sbci	r19, 0xFF	; 255
    2026:	ce 01       	movw	r24, r28
    2028:	89 5e       	subi	r24, 0xE9	; 233
    202a:	9e 4f       	sbci	r25, 0xFE	; 254
    202c:	b9 01       	movw	r22, r18
    202e:	5c dc       	rcall	.-1864   	; 0x18e8 <mavlink_msg_to_send_buffer>
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	80 91 40 02 	lds	r24, 0x0240

	// Send the message (.write sends as bytes)
	Serial.write(buf, len);
    2038:	90 91 41 02 	lds	r25, 0x0241
    203c:	02 96       	adiw	r24, 0x02	; 2
    203e:	fc 01       	movw	r30, r24
    2040:	20 81       	ld	r18, Z
    2042:	31 81       	ldd	r19, Z+1	; 0x01
    2044:	4d 81       	ldd	r20, Y+5	; 0x05
    2046:	5e 81       	ldd	r21, Y+6	; 0x06
    2048:	ce 01       	movw	r24, r28
    204a:	89 5e       	subi	r24, 0xE9	; 233
    204c:	9e 4f       	sbci	r25, 0xFE	; 254
    204e:	bc 01       	movw	r22, r24
    2050:	80 e4       	ldi	r24, 0x40	; 64
    2052:	92 e0       	ldi	r25, 0x02	; 2
    2054:	f9 01       	movw	r30, r18
    2056:	09 95       	icall
    2058:	7f df       	rcall	.-258    	; 0x1f58 <_Z12comm_receivev>
    205a:	c3 5e       	subi	r28, 0xE3	; 227

	comm_receive();
    205c:	dd 4f       	sbci	r29, 0xFD	; 253
    205e:	0f b6       	in	r0, 0x3f	; 63
}
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	0f 91       	pop	r16
    206e:	ef 90       	pop	r14
    2070:	df 90       	pop	r13
    2072:	cf 90       	pop	r12
    2074:	bf 90       	pop	r11
    2076:	af 90       	pop	r10
    2078:	8f 90       	pop	r8
    207a:	08 95       	ret

0000207c <__udivmodsi4>:
    207c:	a1 e2       	ldi	r26, 0x21	; 33
    207e:	1a 2e       	mov	r1, r26
    2080:	aa 1b       	sub	r26, r26
    2082:	bb 1b       	sub	r27, r27
    2084:	fd 01       	movw	r30, r26
    2086:	0d c0       	rjmp	.+26     	; 0x20a2 <__udivmodsi4_ep>

00002088 <__udivmodsi4_loop>:
    2088:	aa 1f       	adc	r26, r26
    208a:	bb 1f       	adc	r27, r27
    208c:	ee 1f       	adc	r30, r30
    208e:	ff 1f       	adc	r31, r31
    2090:	a2 17       	cp	r26, r18
    2092:	b3 07       	cpc	r27, r19
    2094:	e4 07       	cpc	r30, r20
    2096:	f5 07       	cpc	r31, r21
    2098:	20 f0       	brcs	.+8      	; 0x20a2 <__udivmodsi4_ep>
    209a:	a2 1b       	sub	r26, r18
    209c:	b3 0b       	sbc	r27, r19
    209e:	e4 0b       	sbc	r30, r20
    20a0:	f5 0b       	sbc	r31, r21

000020a2 <__udivmodsi4_ep>:
    20a2:	66 1f       	adc	r22, r22
    20a4:	77 1f       	adc	r23, r23
    20a6:	88 1f       	adc	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	1a 94       	dec	r1
    20ac:	69 f7       	brne	.-38     	; 0x2088 <__udivmodsi4_loop>
    20ae:	60 95       	com	r22
    20b0:	70 95       	com	r23
    20b2:	80 95       	com	r24
    20b4:	90 95       	com	r25
    20b6:	9b 01       	movw	r18, r22
    20b8:	ac 01       	movw	r20, r24
    20ba:	bd 01       	movw	r22, r26
    20bc:	cf 01       	movw	r24, r30
    20be:	08 95       	ret

000020c0 <__tablejump2__>:
    20c0:	ee 0f       	add	r30, r30
    20c2:	ff 1f       	adc	r31, r31

000020c4 <__tablejump__>:
    20c4:	05 90       	lpm	r0, Z+
    20c6:	f4 91       	lpm	r31, Z
    20c8:	e0 2d       	mov	r30, r0
    20ca:	09 94       	ijmp

000020cc <abort>:
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	f8 94       	cli
    20d2:	12 c0       	rjmp	.+36     	; 0x20f8 <_exit>

000020d4 <memcpy>:
    20d4:	fb 01       	movw	r30, r22
    20d6:	dc 01       	movw	r26, r24
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <memcpy+0xa>
    20da:	01 90       	ld	r0, Z+
    20dc:	0d 92       	st	X+, r0
    20de:	41 50       	subi	r20, 0x01	; 1
    20e0:	50 40       	sbci	r21, 0x00	; 0
    20e2:	d8 f7       	brcc	.-10     	; 0x20da <memcpy+0x6>
    20e4:	08 95       	ret

000020e6 <strlen>:
    20e6:	fc 01       	movw	r30, r24
    20e8:	01 90       	ld	r0, Z+
    20ea:	00 20       	and	r0, r0
    20ec:	e9 f7       	brne	.-6      	; 0x20e8 <strlen+0x2>
    20ee:	80 95       	com	r24
    20f0:	90 95       	com	r25
    20f2:	8e 0f       	add	r24, r30
    20f4:	9f 1f       	adc	r25, r31
    20f6:	08 95       	ret

000020f8 <_exit>:
    20f8:	f8 94       	cli

000020fa <__stop_program>:
    20fa:	ff cf       	rjmp	.-2      	; 0x20fa <__stop_program>
